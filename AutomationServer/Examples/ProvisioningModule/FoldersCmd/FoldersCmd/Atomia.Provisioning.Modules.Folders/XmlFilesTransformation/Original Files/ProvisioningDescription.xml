<?xml version="1.0" encoding="utf-8"?>
<!-- 1.0.14.265 -->
<provisioningDescription xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../../ProvisioningDescription.xsd">
  <servicesDescription>
    <simpleServiceList>
      <simpleService name="PackageInstalled" friendlyName="Simple service for installing and working with a package." providingModule="Atomia.Provisioning.Modules.TestModules.WebInstaller">
        <propertyList>
          <property name="Id" friendlyName="Id of the installed package, generated by the module" key="true" />
          <property name="PackageName" friendlyName="Name of the package to install" key="true" />
          <property name="DestinationPath" friendlyName="Path to install to" key="true" />
          <property name="Version" friendlyName="The version of the installed software, should be empty when adding the service" />
          <property name="Parameters" friendlyName="JSON-encoded object where attribute is parameter and attribute value is parameter value" />
          <property name="BackupId" friendlyName="Id of a backup to restore from, if set then all other parameters can be empty and will be set to the original values before the backup was made" />
          <property name="ClonePackageId" friendlyName="Id of another package to clone, if set then PackageName can be empty and will be set to the value of the other package. Parameters can exclude parameters not needed by the clone, and will be set to the merged set of the passed params and the ones from the original package." />
        </propertyList>
        <operationList>
          <operation name="IsCloneable" />
          <operation name="IsUpdateable" />
          <operation name="UpdateableToVersion" />
          <operation name="Update" />
        </operationList>
      </simpleService>
      <simpleService name="PackageBackup" friendlyName="Simple service for installing and working with a package." providingModule="Atomia.Provisioning.Modules.TestModules.WebInstaller">
        <propertyList>
          <property name="Id" friendlyName="Id of the package backup, generated by the module" key="true" />
          <property name="OriginalPackageId" friendlyName="Id of the package to backup (or that the backup was originally from)" required="true" />
          <property name="DestinationPath" friendlyName="Path to store the backup file in" required="true" />
        </propertyList>
      </simpleService>
      <simpleService name="PackageQueryService" friendlyName="Simple dummy service for querying Atomia Web Installer without installing a package."
                     providingModule="Atomia.Provisioning.Modules.TestModules.WebInstaller">
        <operationList>
          <!-- Generate table prefix, parameter is a JSON-encoded object with attributes package_name and parameters, where parameters should be the database paramaters specified in the package with name package_name -->
          <operation name="GenerateTablePrefix" />
        </operationList>
        <childServiceList>
          <simpleService name="PackageAvailable" friendlyName="Directly provisioned service of all installed packages." providingModule="Atomia.Provisioning.Modules.TestModules.WebInstaller"
                         noSave="true">
            <propertyList>
              <property name="Parameters" friendlyName="JSON-encoded array of object where each object is a possible parameter to the package. The valid attributes are required (1|0), id, description, default" />
              <property name="Functionality" friendlyName="JSON-encoded object with the attributes upgradeable and cloneable. Both are either set to 1 (true) or 0 (false)" />
              <property name="Requirements" friendlyName="JSON-encoded object with the attributes database (if the package requires one) which is an object with attribute type (type of database, mysql or mssql) and attributes name, hostname, username, password and tableprefix (which indicates which of the package parameters should contain database details) and webserver, which is set to the webserver type, currently apache or iis" />
              <property name="Attributes" friendlyName="JSON-encoded object with the scalar attributes of the package. Valid attributes include icon, language, version, name, description, license, url and category." />
              <property name="Dashboard" friendlyName="JSON-encoded array of objects where attributes are icon, name, type (relative or absolute) and description." />
              <property name="Tags" friendlyName="JSON-encoded array of string tags." />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="SSLCertificate" friendlyName="SSL Certificate" providingModule="Atomia.Provisioning.Modules.TestModules.SSLCertificate">
        <propertyList>
          <property name="Certificate" friendlyName="Certificate in PEM form" key="true" />
          <property name="PrivateKey" friendlyName="Private key in PEM form" key="true" />
          <property name="CSR" friendlyName="Certificate signing request in PEM form" key="true" />
          <property name="PKCS12Export" friendlyName="Certificate and private key in PKCS12 form, read only" />
          <property name="CertificateHash" friendlyName="Certificate hash as hex string, read only" />
          <property name="CommonName" friendlyName="Common name field in the CSR/certificate" />
          <property name="Country" friendlyName="Country field in the CSR/certificate" />
          <property name="State" friendlyName="State field in the CSR/certificate" />
          <property name="City" friendlyName="City field in the CSR/certificate" />
          <property name="Organization" friendlyName="Organisation field in the CSR/certificate" />
          <property name="OrganizationalUnit" friendlyName="Organisational Unit field in the CSR/certificate" />
          <property name="Email" friendlyName="Email field in the CSR/certificate" />
          <property name="NotValidBefore" friendlyName="Start of the timespan for which the certificate is valid" />
          <property name="NotValidAfter" friendlyName="End of the timespan for which the certificate is valid" />
          <property name="GenerationMode" friendlyName="What to generate when csr+key+cert is empty" defaultValue="CSR" />
        </propertyList>
        <operationList>
          <operation name="GetAllowedApproverEmails" />
        </operationList>
        <childServiceList>
          <simpleService name="SSLCertificateOrder" friendlyName="SSL Certificate order" providingModule="Atomia.Provisioning.Modules.TestModules.SSLCertificate">
            <propertyList>
              <property name="OrderId" friendlyName="Order id of the certificate order" key="true" />
              <property name="ApproverEmail" friendlyName="Email of the person responsible for approving the order" required="true" />
              <property name="PeriodYears" friendlyName="Number of years to order the cert for" required="true" defaultValue="1" />
              <property name="Product" friendlyName="Plugin specific data for describing the SSL-product to order if more than one is supported"
                        required="true" />
              <property name="ServerCount" friendlyName="The number of servers on which the cert will be installed" required="true" defaultValue="1" />
              <property name="ContactFirstName" friendlyName="The FirstName property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactLastName" friendlyName="The LastName property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactOrganization" friendlyName="The Organization property of the contact to use when registering the certificate" />
              <property name="ContactAddress" friendlyName="The Address property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactCity" friendlyName="The City property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactZip" friendlyName="The Zip property of the contact to use when registering the certificate" required="true" />
              <property name="ContactState" friendlyName="The State property of the contact to use when registering the certificate" />
              <property name="ContactCountry" friendlyName="The Country property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactPhone" friendlyName="The Phone property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactFax" friendlyName="The Fax property of the contact to use when registering the certificate" />
              <property name="ContactEmail" friendlyName="The Email property of the contact to use when registering the certificate"
                        required="true" />
              <property name="ContactTitle" friendlyName="The Title property of the contact to use when registering the certificate" />
            </propertyList>
            <childServiceList>
              <simpleService name="SSLCertificateOrderStatus" friendlyName="SSL Certificate order status" providingModule="Atomia.Provisioning.Modules.TestModules.SSLCertificate"
                             noSave="true">
                <propertyList>
                  <property name="Status" friendlyName="Indicates the current status of the order, one of in-progress, completed and failed."
                            required="true" />
                  <property name="AdditionalInfo" friendlyName="Plugin specific data for describing the current state in more detail."
                            required="true" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="SSLCertificateOrderQuery" friendlyName="SSL Certificate order query dummy service" providingModule="Atomia.Provisioning.Modules.TestModules.SSLCertificate">
        <operationList>
          <operation name="GetAllowedApproverEmailsForDomain" />
        </operationList>
      </simpleService>
      <simpleService name="IPResource" friendlyName="IP Service" providingModule="Atomia.Provisioning.Modules.TestModules.IPResource">
        <propertyList>
          <property name="IPAddress" friendlyName="IP Address" key="true" />
          <property name="Port" friendlyName="Port" key="true" />
        </propertyList>
      </simpleService>
      <simpleService name="LoadBalancerService" friendlyName="Load Balancer Service" providingModule="Atomia.Provisioning.Modules.TestModules.LoadBalancer">
        <propertyList>
          <property name="ExternalIp" friendlyName="External IP" />
          <property name="ExternalPort" friendlyName="External Port" />
          <property name="NodesPort" friendlyName="Nodes Port" />
          <property name="ServiceType" friendlyName="Service Type" />
        </propertyList>
      </simpleService>
      <simpleService name="Awstats" friendlyName="Awstats support for a web site" providingModule="Atomia.Provisioning.Modules.TestModules.AWStats">
        <propertyList>
          <property name="Hostname" friendlyName="Hostname" key="true" />
          <property name="LogFilePath" friendlyName="Log File Path" />
        </propertyList>
        <childServiceList>
          <simpleService name="HostnameWebAlias" friendlyName="Web Alias for Hostname" providingModule="Atomia.Provisioning.Modules.TestModules.AWStats">
            <propertyList>
              <property name="HostnameAlias" friendlyName="Hostname Alias" key="true" />
            </propertyList>
          </simpleService>
          <simpleService name="HttpAuthProtection" friendlyName="HTTP Auth Protection" providingModule="Atomia.Provisioning.Modules.TestModules.AWStats"
                         min="0" max="1">
            <propertyList>
              <property name="HttpAuthTitle" friendlyName="HTTP Auth Title" />
            </propertyList>
            <childServiceList>
              <simpleService name="AwstatsUser" friendlyName="Awstats User" providingModule="Atomia.Provisioning.Modules.TestModules.AWStats">
                <propertyList>
                  <property name="Username" friendlyName="Username" key="true" />
                  <property name="Password" friendlyName="Password" log="false" storeType="noStore" />
                  <property name="PasswordHash" friendlyName="PasswordHash" log="false" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="DnsZone" friendlyName="DNS Zone" providingModule="Atomia.Provisioning.Modules.TestModules.Dns">
        <propertyList>
          <property name="Zonename" friendlyName="Zonename" key="true" />
          <property name="Zonettl" friendlyName="Zonettl" defaultValue="3600" />
          <property name="Mname" friendlyName="Mname" defaultValue="atdns01.citynetwork.se." />
          <property name="Rname" friendlyName="Rname" defaultValue="registry.citynetwork.se." />
          <property name="Refresh" friendlyName="Refresh" defaultValue="1200" />
          <property name="Retry" friendlyName="Retry" defaultValue="180" />
          <property name="Expire" friendlyName="Expire" defaultValue="1209600" />
          <property name="Minimum" friendlyName="Minimum" defaultValue="1209600" />
          <property name="Shared" friendlyName="Shared" defaultValue="false" />
          <property name="IsReverse" friendlyName="Is zone reverse" defaultValue="false" />
        </propertyList>
        <childServiceList>
          <simpleService name="DnsZoneRecord" friendlyName="DNS Zone Record">
            <propertyList>
              <property name="Id" friendlyName="Id" />
              <property name="Label" friendlyName="Label" />
              <property name="DnsClass" friendlyName="DNS Class" defaultValue="IN" />
              <property name="Ttl" friendlyName="Ttl" defaultValue="3600" />
              <property name="DnsType" friendlyName="DNS Type" />
              <property name="Data" friendlyName="Data" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="DnsSlaveZone" friendlyName="DNS Slave Zone" providingModule="Atomia.Provisioning.Modules.TestModules.Dns">
        <propertyList>
          <property name="Zonename" friendlyName="Zonename" key="true" />
          <property name="MasterIP" friendlyName="Master IP" />
        </propertyList>
      </simpleService>
      <simpleService name="DomainUserAccount" friendlyName="Domain User Account" providingModule="Atomia.Provisioning.Modules.TestModules.ActiveDirectory">
        <propertyList>
          <property name="LogonName" friendlyName="Logon Name" key="true" />
          <property name="Password" friendlyName="Password" storeType="encrypt" log="false" />
          <property name="Domain" friendlyName="Domain" />
          <property name="OrganizationalUnit" friendlyName="Organizational unit" defaultValue="" />
          <property name="PasswordNeverExpire" friendlyName="Password Never Expire" defaultValue="on" />
          <property name="UserCannotChangeThePassword" friendlyName="User Cannot Change The Password" defaultValue="on" />
          <property name="FirstName" friendlyName="First Name" defaultValue="" />
          <property name="LastName" friendlyName="Last Name" defaultValue="" />
          <property name="Initials" friendlyName="Initials" defaultValue="" />
          <property name="FullName" friendlyName="Full Name" />
          <!-- Properties needed for posix interoperability. We assume that there exist a group with the used gid, otherwise the add will fail. -->
          <property name="PosixUid" friendlyName="Unix UID" />
          <property name="PosixGid" friendlyName="Unix GID" />
          <property name="PosixAdditionalGroups" friendlyName="Comma separated list of GIDs of additional groups that the user is member of"
                    defaultValue="" />
          <property name="PosixHomeDirectory" friendlyName="Unix home directory" />
          <property name="PosixLoginShell" friendlyName="Unix shell" />
        </propertyList>
      </simpleService>
      <simpleService name="DomainGroupAccount" friendlyName="Domain Group Account" providingModule="Atomia.Provisioning.Modules.TestModules.ActiveDirectory">
        <propertyList>
          <property name="GroupName" friendlyName="Logon Name" key="true" />
          <property name="Description" friendlyName="Description" defaultValue="" />
          <property name="Domain" friendlyName="Domain" />
          <property name="PosixGid" friendlyName="Unix GID" />
        </propertyList>
      </simpleService>
      <simpleService name="FTPAccount" friendlyName="FTP Account" providingModule="Atomia.Provisioning.Modules.TestModules.PureFTPD" min="1">
        <propertyList>
          <property name="User" friendlyName="Virtual Pure FTPd User" key="true" />
          <property name="Status" friendlyName="Account Status" defaultValue="1" />
          <property name="Password" friendlyName="Virtual Pure FTPd User Password" log="false" storeType="noStore" />
          <property name="PasswordHash" friendlyName="Password hash" log="false" />
          <property name="UID" friendlyName="Virtual Pure FTPd User ID" key="true" />
          <property name="GID" friendlyName="Virtual Pure FTPd Group ID" key="true" />
          <property name="Dir" friendlyName="Virtual Pure FTPd User Home Directory" />
          <property name="UploadBandwidth" friendlyName="Upload Bandwidth" defaultValue="0" />
          <property name="DownloadBandwidth" friendlyName="Download Bandwidth" defaultValue="0" />
          <property name="QuotaSize" friendlyName="Quota Size" defaultValue="0" />
          <property name="QuotaFiles" friendlyName="Quota Files" defaultValue="0" />
          <property name="Comment" friendlyName="Comment" defaultValue="" />
        </propertyList>
      </simpleService>
      <simpleService name="IISApplicationPool" friendlyName="IIS Application Pool" providingModule="Atomia.Provisioning.Modules.TestModules.IIS7"
                     min="1">
        <propertyList>
          <property name="Name" friendlyName="Application Pool Name" defaultValue="" key="true" />
          <property name="Username" friendlyName="Application Pool User" defaultValue="" key="true" />
          <property name="NetVersion" friendlyName=".NET version" defaultValue="v4.0" />
          <property name="Password" friendlyName="Application Pool User's Password" defaultValue="" storeType="encrypt" log="false" />
        </propertyList>
        <operationList>
          <operation name="GenerateSSLRequest" />
        </operationList>
      </simpleService>
      <simpleService name="IISWebSite" friendlyName="IIS Web Site" providingModule="Atomia.Provisioning.Modules.TestModules.IIS7">
        <propertyList>
          <property name="Name" friendlyName="Web site name" key="true" />
          <property name="HomeDirectory" friendlyName="Home Direcotory" />
          <property name="AppPoolName" friendlyName="Application pool name" />
          <property name="ConnectionTimeout" friendlyName="Connection Timeout" defaultValue="00:02:00" />
          <property name="MaximumBandwidth" friendlyName="Maximum Bandwidth" defaultValue="104857600" />
          <property name="MaximumConcurentConnections" friendlyName="Maximum Concurrent Connections" defaultValue="1000" />
          <property name="ASPLCID" friendlyName="ASP LCID" defaultValue="1033" />
          <property name="ASPParentPaths" friendlyName="ASP Parent Paths" defaultValue="true" />
          <property name="OutputCompression" friendlyName="Output Compression" defaultValue="true" />
          <property name="DirectoryBrowsing" friendlyName="Directory Browsing" defaultValue="true" />
        </propertyList>
        <operationList>
          <operation name="Start" />
          <operation name="Stop" />
          <operation name="Restart" />
          <operation name="Recycle" />
          <operation name="GetApplictionPoolStatus" />
          <operation name="GetWebSiteStatus" />
          <operation name="GenerateMachineKey" />
        </operationList>
        <childServiceList>
          <simpleService name="IISWebAlias" friendlyName="IIS Web Alias">
            <propertyList>
              <property name="HostHeader" friendlyName="Web Alias Name" defaultValue="" key="true" />
              <property name="IPAddress" friendlyName="Binding IP address" defaultValue="*" key="true" />
              <property name="Port" friendlyName="Binding port" defaultValue="80" key="true" />
              <property name="BindingProtocol" friendlyName="Binding protocol" defaultValue="http" key="true" />
              <property name="SSLCertificateHash" friendlyName="SSL Certificate Hash (hex string)" />
            </propertyList>
          </simpleService>
          <simpleService name="IISVirtualDirectory" friendlyName="IIS Virtual Directory">
            <propertyList>
              <property name="Name" friendlyName="Virtual Directory Name" key="true" />
              <property name="Path" friendlyName="Virtual Directory Path" />
              <property name="ASPLCID" friendlyName="ASP LCID" defaultValue="10" />
              <property name="ASPEnableParentPaths" friendlyName="ASP Enable Parent Paths" defaultValue="true" />
              <property name="DirectoryBrowsing" friendlyName="Directory Browsing" defaultValue="true" />
            </propertyList>
            <childServiceList>
              <simpleService name="IISVirtualDirectory" />
            </childServiceList>
          </simpleService>
          <simpleService name="IISErrorPage" friendlyName="IIS Error Page">
            <propertyList>
              <property name="ErrorCode" friendlyName="Error Code" key="true" />
              <property name="URL" friendlyName="URL" defaultValue="" />
            </propertyList>
          </simpleService>
          <simpleService name="IISProtectedFolder" friendlyName="IIS Protected Folder">
            <propertyList>
              <property name="Title" friendlyName="Title" />
              <property name="Folder" friendlyName="Folder" key="true" />
            </propertyList>
            <childServiceList>
              <simpleService name="IISProtectedFolderUser" friendlyName="Protected Folder User">
                <propertyList>
                  <property name="Username" friendlyName="Username" key="true" />
                  <property name="Password" friendlyName="Password" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
          <simpleService name="IISDefaultDocument" friendlyName="IIS Default Document">
            <propertyList>
              <property name="FileName" friendlyName="File Name" key="true" defaultValue="Default.asp" />
            </propertyList>
          </simpleService>
          <simpleService name="IISHandlerMapping" friendlyName="IIS Handler Mapping">
            <propertyList>
              <property name="RequestPath" friendlyName="Request Path" key="true" />
              <property name="Executable" friendlyName="Executable" />
              <property name="Name" friendlyName="Name" />
            </propertyList>
            <operationList>
              <operation name="AddScriptMap" />
              <operation name="AddWildcardScriptMap" />
            </operationList>
          </simpleService>
          <simpleService name="IISWebSiteIPRestriction" friendlyName="IIS IP Restriction For Web Site">
            <propertyList>
              <property name="IPAddress" friendlyName="IP Address" key="true" />
              <property name="AllowDeny" friendlyName="Allow\Deny" />
            </propertyList>
          </simpleService>
          <simpleService name="IISWebSiteMimeType" friendlyName="IIS Mime Type For Web Site">
            <propertyList>
              <property name="AssociatedExtension" friendlyName="Associated Extension" />
              <property name="MIME" friendlyName="MIME" key="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="IISIPRestriction" friendlyName="IIS IP Restriction">
        <propertyList>
          <property name="IPAddress" friendlyName="IP Address" key="true" />
          <property name="AllowDeny" friendlyName="Allow\Deny" />
        </propertyList>
      </simpleService>
      <!-- Why is the Mime type root simple service? -->
      <simpleService name="IISMimeType" friendlyName="IIS Mime Type">
        <propertyList>
          <property name="AssociatedExtension" friendlyName="Associated Extension" />
          <property name="MIME" friendlyName="MIME" key="true" />
        </propertyList>
      </simpleService>
      <simpleService name="MailmanDomain" friendlyName="Mailman mailinglist domain" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman">
        <propertyList>
          <property name="Domain" friendlyName="Domain name of list" key="true" required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="MailmanList" friendlyName="Mailman mailinglist" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman">
            <propertyList>
              <property name="Name" friendlyName="Short name of the list" key="true" required="true" />
            </propertyList>
            <childServiceList>
              <simpleService name="MailmanListOptions" friendlyName="Mailman mailinglist options" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                             noSave="true">
                <propertyList>
                  <property name="admin_notify_mchanges" friendlyName="The admin_notify_mchanges mailman REST API property" />
                  <property name="anonymous_list" friendlyName="The anonymous_list mailman REST API property" />
                  <property name="advertised" friendlyName="The advertised mailman REST API property" />
                  <property name="administrivia" friendlyName="The administrivia mailman REST API property" />
                  <property name="filter_content" friendlyName="The filter_content mailman REST API property" />
                  <property name="autorespond_owner" friendlyName="The autorespond_owner mailman REST API property" />
                  <property name="autoresponse_request_text" friendlyName="The autoresponse_request_text mailman REST API property" />
                  <property name="description" friendlyName="The description mailman REST API property" />
                  <property name="autoresponse_grace_period" friendlyName="The autoresponse_grace_period mailman REST API property" />
                  <property name="autoresponse_owner_text" friendlyName="The autoresponse_owner_text mailman REST API property" />
                  <property name="include_rfc2369_headers" friendlyName="The include_rfc2369_headers mailman REST API property" />
                  <property name="digest_last_sent_at" friendlyName="The digest_last_sent_at mailman REST API property" />
                  <property name="convert_html_to_plaintext" friendlyName="The convert_html_to_plaintext mailman REST API property" />
                  <property name="autorespond_postings" friendlyName="The autorespond_postings mailman REST API property" />
                  <property name="digest_size_threshold" friendlyName="The digest_size_threshold mailman REST API property" />
                  <property name="autorespond_requests" friendlyName="The autorespond_requests mailman REST API property" />
                  <property name="created_at" friendlyName="The created_at mailman REST API property" />
                  <property name="real_name" friendlyName="The real_name mailman REST API property" />
                  <property name="admin_immed_notify" friendlyName="The admin_immed_notify mailman REST API property" />
                  <property name="include_list_post_header" friendlyName="The include_list_post_header mailman REST API property" />
                  <property name="autoresponse_postings_text" friendlyName="The autoresponse_postings_text mailman REST API property" />
                  <property name="collapse_alternatives" friendlyName="The collapse_alternatives mailman REST API property" />
                  <property name="reply_goes_to_list" friendlyName="The reply_goes_to_list mailman REST API property" />
                  <property name="send_welcome_msg" friendlyName="The send_welcome_msg mailman REST API property" />
                  <property name="welcome_msg" friendlyName="The welcome_msg mailman REST API property" />
                  <property name="member_moderation_action" friendlyName="The member_moderation_action mailman REST API property" />
                  <property name="default_member_moderation" friendlyName="The default_member_moderation mailman REST API property" />
                  <property name="generic_nonmember_action" friendlyName="The generic_nonmember_action mailman REST API property" />
                </propertyList>
              </simpleService>
              <simpleService name="MailmanListSubscribers" friendlyName="Mailman mailinglist subscribers" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                             noSave="true">
                <propertyList>
                  <property name="Num" friendlyName="The number of subscribers" />
                </propertyList>
                <childServiceList>
                  <simpleService name="MailmanListSubscriber" friendlyName="Mailman mailinglist subscriber" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                                 noSave="true">
                    <propertyList>
                      <property name="Email" friendlyName="The address of the subscriber" required="true" key="true" />
                    </propertyList>
                  </simpleService>
                </childServiceList>
              </simpleService>
              <simpleService name="MailmanListModerators" friendlyName="Mailman mailinglist moderators" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                             noSave="true">
                <propertyList>
                  <property name="Num" friendlyName="The number of moderators" />
                </propertyList>
                <childServiceList>
                  <simpleService name="MailmanListModerator" friendlyName="Mailman mailinglist moderator" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                                 noSave="true">
                    <propertyList>
                      <property name="Email" friendlyName="The address of the moderator" required="true" key="true" />
                    </propertyList>
                  </simpleService>
                </childServiceList>
              </simpleService>
              <simpleService name="MailmanListOwners" friendlyName="Mailman mailinglist owners" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                             noSave="true">
                <propertyList>
                  <property name="Num" friendlyName="The number of owners" />
                </propertyList>
                <childServiceList>
                  <simpleService name="MailmanListOwner" friendlyName="Mailman mailinglist owner" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                                 noSave="true">
                    <propertyList>
                      <property name="Email" friendlyName="The address of the owner" required="true" key="true" />
                    </propertyList>
                  </simpleService>
                </childServiceList>
              </simpleService>
              <simpleService name="MailmanListBanList" friendlyName="Mailman mailinglist ban list" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                             noSave="true">
                <propertyList>
                  <property name="Num" friendlyName="The number of banned addresses" />
                </propertyList>
                <childServiceList>
                  <simpleService name="MailmanListBannedAddress" friendlyName="Mailman mailinglist banned address" providingModule="Atomia.Provisioning.Modules.TestModules.Mailman"
                                 noSave="true">
                    <propertyList>
                      <property name="Email" friendlyName="The banned address" required="true" key="true" />
                    </propertyList>
                  </simpleService>
                </childServiceList>
              </simpleService>
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="MSSQLDatabase" friendlyName="MSSQL Database" providingModule="Atomia.Provisioning.Modules.TestModules.MSSQL">
        <propertyList>
          <property name="DatabaseName" friendlyName="Database Name" key="true" required="true" />
          <property name="Collation" friendlyName="Collation" />
        </propertyList>
      </simpleService>
      <simpleService name="MSSQLLogin" friendlyName="MSSQL Login" providingModule="Atomia.Provisioning.Modules.TestModules.MSSQL">
        <propertyList>
          <property name="LoginName" friendlyName="Login name" key="true" required="true" />
          <property name="Password" friendlyName="Password" log="false" storeType="noStore" />
          <property name="PasswordHash" friendlyName="Password hash" log="false" />
        </propertyList>
        <childServiceList>
          <simpleService name="MSSQLDatabasePrivileges" friendlyName="Database Privileges" providingModule="Atomia.Provisioning.Modules.TestModules.MSSQL">
            <propertyList>
              <property name="DatabaseName" friendlyName="Database Name" required="true" />
              <property name="Privileges" friendlyName="Privileges" />
              <property name="DatabaseRoles" friendlyName="Database Roles" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="MySQLDatabase" friendlyName="MySQL Database" providingModule="Atomia.Provisioning.Modules.TestModules.MySql">
        <propertyList>
          <property name="DatabaseName" friendlyName="Database Name" key="true" required="true" />
          <property name="CharacterSet" friendlyName="Character Set" />
          <property name="Collation" friendlyName="Collation" />
        </propertyList>
      </simpleService>
      <simpleService name="MySQLAccount" friendlyName="MySQL Account" providingModule="Atomia.Provisioning.Modules.TestModules.MySql">
        <propertyList>
          <property name="Username" friendlyName="Username" key="true" required="true" />
          <property name="Hostname" friendlyName="Hostname" key="true" />
          <property name="Password" friendlyName="Password" log="false" storeType="noStore" />
          <property name="PasswordHash" friendlyName="Password hash" log="false" />
        </propertyList>
        <childServiceList>
          <simpleService name="GlobalPrivileges" friendlyName="Global Privileges" providingModule="Atomia.Provisioning.Modules.TestModules.MySql"
                         min="1" max="1">
            <propertyList>
              <property name="Privileges" friendlyName="Privileges" required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="DatabasePrivileges" friendlyName="Database Privileges" providingModule="Atomia.Provisioning.Modules.TestModules.MySql">
            <propertyList>
              <property name="Privileges" friendlyName="Privileges" required="true" />
              <property name="DatabaseName" friendlyName="Database Name" required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="MailDomain" friendlyName="Mail Domain" providingModule="Atomia.Provisioning.Modules.TestModules.PostfixAndCyrus">
        <propertyList>
          <property name="Domain" friendlyName="Domain" key="true" />
          <property name="Transport" friendlyName="Transport" defaultValue="cyrus" allowDefaultOverride="false" />
        </propertyList>
        <childServiceList>
          <simpleService name="MailAccount" friendlyName="Mail Account">
            <propertyList>
              <property name="Email" friendlyName="Email" key="true" />
              <property name="Password" friendlyName="Password" log="false" storeType="noStore" />
              <property name="PasswordHash" friendlyName="Password" log="false" />
              <property name="Status" friendlyName="Status" defaultValue="active" />
              <property name="Maildir" friendlyName="Maildir" />
              <property name="Quota" friendlyName="Quota" defaultValue="500000" />
              <property name="VacationActive" friendlyName="Active" defaultValue="false" />
              <property name="VacationSubject" friendlyName="Subject" defaultValue="Vacation Response" />
              <property name="VacationBody" friendlyName="Body" defaultValue="This is automated vacation message." />
            </propertyList>
            <childServiceList>
              <simpleService name="MailForwarding" friendlyName="Mail Forwarding">
                <propertyList>
                  <property name="Email" friendlyName="Email" />
                </propertyList>
              </simpleService>
              <simpleService name="MailAlias" friendlyName="Mail Alias">
                <propertyList>
                  <property name="Email" friendlyName="Email" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
          <simpleService name="Forwarder" friendlyName="Forwarder service" providingModule="Atomia.Provisioning.Modules.TestModules.PostfixAndCyrus">
            <propertyList>
              <property name="Email" friendlyName="Email to setup forwarding for" />
            </propertyList>
            <childServiceList>
              <simpleService name="TargetEmail" friendlyName="Target email to forward to" providingModule="Atomia.Provisioning.Modules.TestModules.PostfixAndCyrus">
                <propertyList>
                  <property name="Email" friendlyName="Email address to forward to" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="RootFolder" friendlyName="Root Folder" providingModule="Atomia.Provisioning.Modules.TestModules.FileSystem">
        <propertyList>
          <property name="FolderPath" friendlyName="Folder Path" key="true" />
          <property name="Name" friendlyName="Folder Name" key="true" />
          <property name="Permissions" friendlyName="Posix permissions" />
          <property name="Owner" friendlyName="Folder owner name" />
          <property name="Group" friendlyName="Folder group name" />
        </propertyList>
        <childServiceList>
          <simpleService name="File" friendlyName="File" providingModule="Atomia.Provisioning.Modules.TestModules.FileSystem" noSave="true">
            <propertyList>
              <property name="FolderPath" friendlyName="Folder Path" key="true" />
              <property name="Name" friendlyName="File Name" key="true" />
              <property name="Permissions" friendlyName="Posix permissions" />
              <property name="Owner" friendlyName="File owner name" />
              <property name="Group" friendlyName="File group name" />
            </propertyList>
            <operationList>
              <operation name="GetFileContent" />
              <operation name="SetFileContent" />
              <operation name="CopyContentFromFile" />
            </operationList>
          </simpleService>
          <simpleService name="Folder" friendlyName="Folder" providingModule="Atomia.Provisioning.Modules.TestModules.FileSystem" noSave="true">
            <propertyList>
              <property name="FolderPath" friendlyName="Folder Path" key="true" />
              <property name="Name" friendlyName="Folder Name" key="true" />
              <property name="Permissions" friendlyName="Posix permissions" />
              <property name="Owner" friendlyName="Folder owner name" />
              <property name="Group" friendlyName="Folder group name" />
            </propertyList>
            <childServiceList>
              <simpleService name="File" />
              <simpleService name="Folder" />
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="DomainRegContact" friendlyName="Atomia Domain Registration contact" providingModule="Atomia.Provisioning.Modules.TestModules.DomainRegistration">
        <propertyList>
          <property name="Id" friendlyName="The id of the contact" />
          <property name="Name" friendlyName="The name of the contact" required="true" />
          <property name="Org" friendlyName="The organization of the contact" />
          <property name="Street1" friendlyName="The first street address of the contact" required="true" />
          <property name="Street2" friendlyName="The second street address of the contact" />
          <property name="Street3" friendlyName="The third street address of the contact" />
          <property name="City" friendlyName="The city of the contact" required="true" />
          <property name="State" friendlyName="The state of the contact" />
          <property name="Zip" friendlyName="The zip code of the contact" required="true" />
          <property name="Country" friendlyName="The country code of the contact" required="true" />
          <property name="Voice" friendlyName="The voice phone number of the contact" required="true" />
          <property name="VoiceExtension" friendlyName="The voice phone extension code of the contact" />
          <property name="Fax" friendlyName="The fax number of the contact" />
          <property name="FaxExtension" friendlyName="The fax extension code of the contact" />
          <property name="Email" friendlyName="The email address of the contact" required="true" />
          <property name="Orgno" friendlyName="The organisation number of the contact" />
          <property name="Vatno" friendlyName="The VAT number for the contact" />
        </propertyList>
      </simpleService>
      <simpleService name="DomainRegDomain" friendlyName="Atomia Domain Registration domain" providingModule="Atomia.Provisioning.Modules.TestModules.DomainRegistration">
        <propertyList>
          <property name="Name" friendlyName="Domain name" key="true" required="true" />
          <property name="Registered" friendlyName="0 if the domain is not registered, and registration should be done when adding the service, 1 otherwise (to add existing domains)"
                    required="true" />
          <property name="OwnerId" friendlyName="Contact id of registrant" required="true" />
          <property name="AdminId" friendlyName="Contact id of admin-c" required="true" />
          <property name="TechId" friendlyName="Contact id of tech-c" required="true" />
          <property name="BillingId" friendlyName="Contact id of billing-c" required="true" />
          <property name="AutoRenew" friendlyName="The auto-renew status of the domain" required="true" />
          <property name="Nameservers" friendlyName="JSON-formatted array of nameservers of the form [ { hostname = host, ipv4 = [], ipv6 = [] } ]"
                    defaultValue="[ { hostname : 'atdns01.citynetwork.se', ipv4 : [], ipv6 : [] }, { hostname : 'atdns02.citynetwork.se', ipv4 : [], ipv6 : [] }, { hostname : 'atdns03.citynetwork.se', ipv4 : [], ipv6 : [] } ]" />
          <property name="DSRecords" friendlyName="JSON-formatted array of ds-records of the form [ { keyTag = a, alg = b, digestType = c,  digest = d } ]"
                    defaultValue="" />
        </propertyList>
        <operationList>
          <operation name="RenewMonths" />
          <operation name="GenerateAuthInfo" />
          <operation name="Lock" />
          <operation name="Unlock" />
          <operation name="Hold" />
          <operation name="Restore" />
          <operation name="Transfer" />
          <operation name="TransferApprove" />
          <operation name="TransferReject" />
          <operation name="TransferCancel" />
          <operation name="DomainIsLocal" />
          <operation name="Remove" />
          <operation name="UpdateContacts" />
          <operation name="SyncNameservers" />
        </operationList>
        <childServiceList>
          <simpleService name="DomainRegStatus" friendlyName="Atomia Domain Registration domain status" providingModule="Atomia.Provisioning.Modules.TestModules.DomainRegistration"
                         noSave="true">
            <propertyList>
              <property name="Domain" friendlyName="Domain name" key="true" required="true" />
              <property name="Local" friendlyName="Domain name is handled by Atomia Provisioning" required="true" />
              <property name="ExpireDate" friendlyName="Domain name expire date if the domain is local" />
              <property name="TransferStatus" friendlyName="Transfer status if a transfer has been requested for the domain name and not succeded yet, one of pending or failed" />
              <property name="TransferReason" friendlyName="The reason a transfer was rejected, if it was supplied by the loosing registry, one of authinfo, inprogress, policy, status or unknown" />
              <property name="TransferMessage" friendlyName="The human readable cause of a transfer rejection, if available" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="ApacheWebSite" friendlyName="Apache Web Site" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
        <propertyList>
          <property name="ServerName" friendlyName="Server Name" required="true" key="true" />
          <property name="DirectoryIndex" friendlyName="Directory Index" defaultValue="index.php index.html index.htm" />
          <property name="OptionsIndexes" friendlyName="OptionsIndexes" defaultValue="false" />
          <property name="AllowFrom" friendlyName="Allow From" defaultValue="" />
          <property name="DenyFrom" friendlyName="Deny From" defaultValue="" />
          <property name="Username" friendlyName="Username" required="true" />
          <property name="CertificateHash" friendlyName="Fingerprint of the certificate to use if SSLPort is set to something other than 0"
                    defaultValue="" />
          <property name="SSLPort" friendlyName="The port to use when listening for SSL requests to this site" defaultValue="0" />
          <property name="Suspended" friendlyName="Sets the website suspended state" defaultValue="false" />
        </propertyList>
        <childServiceList>
          <simpleService name="ApacheWebAlias" friendlyName="Apache Web Alias" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
            <propertyList>
              <property name="AliasHostname" friendlyName="Alias Hostname" key="true" required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="ApacheErrorDocument" friendlyName="Apache Error Document" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
            <propertyList>
              <property name="ErrorCode" friendlyName="Error Code" key="true" required="true" />
              <property name="URL" friendlyName="URL" key="true" required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="ApacheProtectedFolder" friendlyName="Apache Protected Folder" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
            <propertyList>
              <property name="Folder" friendlyName="Folder" key="true" required="true" />
              <property name="Title" friendlyName="Title" />
            </propertyList>
            <childServiceList>
              <simpleService name="ApacheProtectedFolderUser" friendlyName="Apache Protected Folder User" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
                <propertyList>
                  <property name="Username" friendlyName="Username" required="true" key="true" />
                  <property name="Password" friendlyName="Password" log="false" storeType="noStore" />
                  <property name="PasswordHash" friendlyName="PasswordHash" log="false" />
                </propertyList>
              </simpleService>
            </childServiceList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="ApacheParkedHost" friendlyName="Apache Parked Host" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
        <propertyList>
          <property name="Host" friendlyName="Host" required="true" key="true" />
        </propertyList>
      </simpleService>
      <simpleService name="ApacheRedirection" friendlyName="Apache Redirection" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
        <propertyList>
          <property name="Host" friendlyName="Host" required="true" key="true" />
          <property name="URL" friendlyName="URL" required="true" />
        </propertyList>
      </simpleService>
      <simpleService name="ApacheFrameRedirection" friendlyName="Apache Frame Redirection" providingModule="Atomia.Provisioning.Modules.TestModules.Apache">
        <propertyList>
          <property name="Host" friendlyName="Host" required="true" key="true" />
          <property name="Title" friendlyName="Title" defaultValue="" />
          <property name="Keywords" friendlyName="Keywords" defaultValue="" />
          <property name="Description" friendlyName="Description" defaultValue="" />
          <property name="URL" friendlyName="URL" required="true" />
        </propertyList>
      </simpleService>
      <simpleService name="GoogleSite" friendlyName="Google Site" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="SiteName" friendlyName="Website Name" key="true" defaultValue="testgsite" />
          <property name="Username" friendlyName="Google Account Username" key="true" defaultValue="ivanr71@gmail.com" />
          <property name="Password" friendlyName="Google Account Password" defaultValue="xxx" />
          <property name="SiteURL" friendlyName="Website URL generated by google" defaultValue="" />
          <property name="Category" friendlyName="Website category, used for filtering sites." />
          <property name="Description" friendlyName="General description." defaultValue="test description" />
          <property name="Theme" friendlyName="Theme for site. One from existing themes list." defaultValue="" />
          <property name="AddCmd" friendlyName="Command to be executed to add Google Site" defaultValue="Atomia.Provisioning.Modules.GoogleSites.exe --Add --SiteName %{service[SiteName]} --GoogleUser %{service[Username]} --GooglePass %{service[Password]} --SiteCategory %{service[Category]} --SiteDescription %{service[Description]} --SiteTheme %{service[Theme]}"
                    required="true" />
          <property name="RemCmd" friendlyName="Command to be executed to remove Google Site" defaultValue="Atomia.Provisioning.Modules.GoogleSites.exe --Remove --SiteId %{service[Id]} --SiteName %{service[SiteName]} --GoogleUser %{service[Username]} --GooglePass %{service[Password]}"
                    required="true" />
          <property name="ModCmd" friendlyName="Command to be executed to modify Google Site" defaultValue="Atomia.Provisioning.Modules.GoogleSites.exe --Modify --SiteId %{service[Id]} --SiteName %{service[SiteName]} --GoogleUser %{service[Username]} --GooglePass %{service[Password]} --SiteCategory %{service[Category]} --SiteDescription %{service[Description]} --SiteTheme %{service[Theme]}"
                    required="true" />
        </propertyList>
      </simpleService>
      <simpleService name="FoldersOld" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="foo" friendlyName="foo" defaultValue="222" />
          <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="AddCmd" friendlyName="Command to be executed to add Folder" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemCmd" friendlyName="Command to be executed to remove Folder" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModCmd" friendlyName="Command to be executed to modify Folder" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="MoveToResCmd" friendlyName="Command to be executed to move service to other resource" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --MoveToResource"
                    required="true" />
          <property name="ListCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --List"
                    required="true" />
          <property name="ListNoChildrenCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --ListNoChildren"
                    required="true" />
          <property name="ListChildrenCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --ListChildren"
                    required="true" />
          <property name="CallOpCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --CallOp"
                    required="true" />
          <property name="SynchExpPropCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --SynchExpProp"
                    required="true" />
          <property name="GetServiceDescCmd" friendlyName="Command to be executed to list folders" defaultValue="Atomia.Provisioning.Modules.Folders.exe --$TransGuid --GetServiceDesc"
                    required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="FilesOld" friendlyName="Files" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="AddCmd" friendlyName="Command to be executed to add File" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemCmd" friendlyName="Command to be executed to remove File" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModCmd" friendlyName="Command to be executed to modify File" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="Folders" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="StdinStdout" friendlyName="Are commands going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning" defaultValue="true"
                    required="true" />
          <property name="AddExecuteCmd" friendlyName="Command to be executed to add Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddCommitCmd" friendlyName="Command to be executed to add Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddRollbackCmd" friendlyName="Command to be executed to add Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFolderPath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]}"
                    required="true" />
        </propertyList>
        <operationList>
          <operation name="GetFullFolderPath" />
        </operationList>
        <childServiceList>
          <simpleService name="Files" friendlyName="Files">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="true" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[ParentFolder]}"
                        required="true" />
            </propertyList>
            <operationList>
              <operation name="GetFullFilePath" />
            </operationList>
          </simpleService>
          <simpleService name="FilesWithoutPlugin" friendlyName="Files service, where files are provisioned without command line plugin application. Direct command line commands are used.">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="echo {service[Content]} &gt; {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="" required="false" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]} {service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete {service[Name]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="ren {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]} {newservice[Name]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue=""
                        required="false" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="ren {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]} {oldservice[Name]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:echo {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
            </propertyList>
            <operationList>
              <operation name="GetFullFilePath" />
            </operationList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="Folders" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="StdinStdout" friendlyName="Are commands going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning" defaultValue="false"
                    required="true" />
          <property name="AddExecuteCmd" friendlyName="Command to be executed to add Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddCommitCmd" friendlyName="Command to be executed to add Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddRollbackCmd" friendlyName="Command to be executed to add Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFolderPath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]}"
                    required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="Files" friendlyName="Files">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[ParentFolder]}"
                        required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="FilesWithoutPlugin" friendlyName="Files service, where files are provisioned without command line plugin application. Direct command line commands are used.">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="echo '{service[Content]}' &gt; {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="" required="false" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]} {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="ren {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]} {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue=""
                        required="false" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="ren {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]} {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:echo {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="Folders" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="StdinStdout" friendlyName="Are commands going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning" defaultValue="false"
                    required="true" />
          <property name="AddExecuteCmd" friendlyName="Command to be executed to add Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddCommitCmd" friendlyName="Command to be executed to add Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddRollbackCmd" friendlyName="Command to be executed to add Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFolderPath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]}"
                    required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="Files" friendlyName="Files">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[ParentFolder]}"
                        required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="FilesWithoutPlugin" friendlyName="Files service, where files are provisioned without command line plugin application. Direct command line commands are used.">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="echo '{service[Content]}' &gt; {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="" required="false" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]} {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="ren {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]} {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue=""
                        required="false" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="ren {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]} {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:echo {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="Folders" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="StdinStdout" friendlyName="Are commands going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning" defaultValue="false"
                    required="true" />
          <property name="AddExecuteCmd" friendlyName="Command to be executed to add Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddCommitCmd" friendlyName="Command to be executed to add Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddRollbackCmd" friendlyName="Command to be executed to add Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFolderPath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]}"
                    required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="Files" friendlyName="Files">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[ParentFolder]}"
                        required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="FilesWithoutPlugin" friendlyName="Files service, where files are provisioned without command line plugin application. Direct command line commands are used.">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="echo '{service[Content]}' &gt; {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="" required="false" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]} {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="ren {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]} {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue=""
                        required="false" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="ren {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]} {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:echo {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
      <simpleService name="Folders" friendlyName="Folders" providingModule="Atomia.Provisioning.Modules.CmdLocal.CmdLocal">
        <propertyList>
          <property name="Id" friendlyName="Id of the instance, generated by module." defaultValue="123" />
          <property name="Name" friendlyName="Folder Name" key="true" defaultValue="ChangeMe" />
          <property name="Description" friendlyName="General description." defaultValue="Change this default description value" />
          <property name="StdinStdout" friendlyName="Are commands going to accept and return JSON encoded service via stdin/stdout"
                    defaultValue="false" required="true" />
          <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning" defaultValue="false"
                    required="true" />
          <property name="AddExecuteCmd" friendlyName="Command to be executed to add Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddCommitCmd" friendlyName="Command to be executed to add Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="AddRollbackCmd" friendlyName="Command to be executed to add Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify Folder, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify Folder, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify Folder, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --Description {service[Description]}"
                    required="true" />
          <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFolderPath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]}"
                    required="true" />
        </propertyList>
        <childServiceList>
          <simpleService name="Files" friendlyName="Files">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="TestChangesPropagation" friendlyName="TestChangesPropagation" defaultValue="" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Add --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Remove --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="Atomia.Provisioning.Modules.Folders.exe --Modify --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[parent.Name]} --Content {service[Content]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:Atomia.Provisioning.Modules.Folders.exe --CallOp --RootFolder {resource[RootFolder]} --Name {service[Name]} --ParentFolder {service[ParentFolder]}"
                        required="true" />
            </propertyList>
          </simpleService>
          <simpleService name="FilesWithoutPlugin" friendlyName="Files service, where files are provisioned without command line plugin application. Direct command line commands are used.">
            <propertyList>
              <property name="Id" friendlyName="Id" defaultValue="123" />
              <property name="Name" friendlyName="Name" defaultValue="TestFile.txt" key="true" />
              <property name="ParentFolder" friendlyName="Parent folder" key="true" defaultValue="WillTakeValueFromParentService" />
              <property name="Content" friendlyName="File content" defaultValue="123" />
              <property name="StdinStdout" friendlyName="Is command going to accept and return JSON encoded service via stdin/stdout"
                        defaultValue="false" required="true" />
              <property name="UseCmdLinePlugin" friendlyName="Are commands going to use plugin command line app for provisioning"
                        defaultValue="false" required="true" />
              <property name="AddExecuteCmd" friendlyName="Command to be executed to add File, begin transaction" defaultValue="echo '{service[Content]}' &gt; {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="AddCommitCmd" friendlyName="Command to be executed to add File, commit transaction" defaultValue="" required="false" />
              <property name="AddRollbackCmd" friendlyName="Command to be executed to add File, rollback transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="RemoveExecuteCmd" friendlyName="Command to be executed to remove File, begin transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]} {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveCommitCmd" friendlyName="Command to be executed to remove File, commit transaction" defaultValue="del {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete"
                        required="true" />
              <property name="RemoveRollbackCmd" friendlyName="Command to be executed to remove File, rollback transaction" defaultValue="ren {resource[RootFolder]}{service[parent.Name]}\{service[Name]}_MarkedForDelete {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
              <property name="ModifyExecuteCmd" friendlyName="Command to be executed to modify File, begin transaction" defaultValue="ren {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]} {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]}"
                        required="true" />
              <property name="ModifyCommitCmd" friendlyName="Command to be executed to modify File, commit transaction" defaultValue=""
                        required="false" />
              <property name="ModifyRollbackCmd" friendlyName="Command to be executed to modify File, rollback transaction" defaultValue="ren {resource[RootFolder]}{newservice[parent.Name]}\{newservice[Name]} {resource[RootFolder]}{oldservice[parent.Name]}\{oldservice[Name]}"
                        required="true" />
              <property name="OperationMappingCmd" friendlyName="Define how opperations are executed" defaultValue="GetFullFilePath:echo {resource[RootFolder]}{service[parent.Name]}\{service[Name]}"
                        required="true" />
            </propertyList>
          </simpleService>
        </childServiceList>
      </simpleService>
    </simpleServiceList>
    <complexServiceList>
      <complexService name="FoldersTestRollback" friendlyName="FoldersTestRollback">
        <complexServicePropertyList>
          <complexServiceProperty name="FolderTestName" friendlyName="FolderTestName" />
          <complexServiceProperty name="FolderTest2Name" friendlyName="FolderTest2Name" />
        </complexServicePropertyList>
        <partList>
          <partService name="Folders" min="1" max="2" />
        </partList>
        <init>
          <add partName="Folders">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Name">
                    <expression>$FoldersTestRollback::FolderTestName</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="Folders">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Name">
                    <expression>$FoldersTestRollback::FolderTest2Name</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
        </init>
      </complexService>
      <complexService name="CsWebPackages" friendlyName="Virtual service used to group all Atomia Web Installer packages and backups in an account">
        <partList>
          <partService name="PackageInstalled" />
          <partService name="PackageBackup" />
          <partService name="PackageQueryService" />
        </partList>
        <init>
          <add partName="PackageQueryService" />
        </init>
      </complexService>
      <complexService name="CsDomainRegList" friendlyName="List of registered domains">
        <partList>
          <partService name="DomainRegDomain" canAddSame="false">
          </partService>
        </partList>
      </complexService>
      <complexService name="CsAwstats" friendlyName="Awstats complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain to add Awstats for" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Domain prefix" />
          <complexServiceProperty name="RootFolderParentPath" friendlyName="Root folder parent path" />
          <complexServiceProperty name="InitDns" />
        </complexServicePropertyList>
        <partList>
          <partService name="RootFolder" min="1" max="1">
            <partList>
              <partService name="Folder" max="0">
              </partService>
              <partService name="File" max="0">
              </partService>
            </partList>
          </partService>
          <partService name="DnsZone" min="1" max="2">
          </partService>
          <partService name="Awstats" min="1" max="1">
            <partList>
              <partService name="HttpAuthProtection" max="1">
                <partList>
                  <partService name="AwstatsUser" canAddSame="false">
                  </partService>
                </partList>
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="RootFolder">
            <initPropertyList>
              <initProperty name="FolderPath" value="/citynetwork/awstats.citynetwork.se" />
              <initProperty name="Permissions" value="710" />
              <initProperty name="Owner" value="0" />
              <initProperty name="Group" value="33" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Name">
                    <expression>$CsAwstats::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="Awstats" instanceName="AwstatsInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsAwstats::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="LogFilePath">
                    <expression>\/storage\/content\/+$CsAwstats::RootFolderParentPath+\/+#Account()+\/+$CsAwstats::Domain+\/logs\/access\.log</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="DnsZone" condition="$CsAwstats::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsAwstats::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <!-- "awstats" record, without subdomain -->
            <add partName="DnsZoneRecord" condition="$CsAwstats::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <initProperty name="Label" value="awstats" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>#Instance(AwstatsInstance).Resource.ReportsSiteIP</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- "awstats" record, with subdomain -->
            <add partName="DnsZoneRecord" condition="$CsAwstats::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>#Instance(AwstatsInstance).Resource.ReportsSiteIP</expression>
                    </serviceProperty>
                    <serviceProperty name="Label">
                      <expression>awstats\.+$CsAwstats::DomainPrefix</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>awstats\.+$CsAwstats::Domain</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(AwstatsInstance).Resource.ReportsSiteIP</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsMailmanSupport" friendlyName="Domain mailing list support">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Domain Prefix" />
          <complexServiceProperty name="Subdomain" friendlyName="Subdomain to add the mailing list for" defaultValue="lists" />
          <complexServiceProperty name="List" friendlyName="List name (i.e. user part of email address)" key="true" />
          <complexServiceProperty name="InitDns" defaultValue="true" />
        </complexServicePropertyList>
        <partList>
          <partService name="MailmanDomain" min="1" max="1">
            <partList>
              <partService name="MailmanList" min="1">
              </partService>
            </partList>
          </partService>
          <partService name="DnsZone" min="1" max="1">
          </partService>
        </partList>
        <init>
          <add partName="MailmanDomain" instanceName="MailmanDomainInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Domain">
                    <expression>$CsMailmanSupport::Subdomain+\.+$CsMailmanSupport::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="MailmanList">
              <initPropertyList>
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Name">
                      <expression>$CsMailmanSupport::List</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <add partName="DnsZone" condition="$CsMailmanSupport::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsMailmanSupport::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <!-- A record, no subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailmanSupport::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMailmanSupport::Subdomain</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MailmanDomainInstance).Resource.IP</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- A record, with subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailmanSupport::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMailmanSupport::Subdomain+\.+$CsMailmanSupport::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MailmanDomainInstance).Resource.IP</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- MX record, no subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailmanSupport::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="MX" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMailmanSupport::Subdomain</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>10 +$CsMailmanSupport::Subdomain+\.+$CsMailmanSupport::Domain+\.</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- MX record, with subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailmanSupport::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="MX" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMailmanSupport::Subdomain+\.+$CsMailmanSupport::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>10 +$CsMailmanSupport::Subdomain+\.+$CsMailmanSupport::Domain+\.</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsMailSupport" friendlyName="Domain mail support">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Domain Prefix" />
          <complexServiceProperty name="InitInfoEmail" friendlyName="Info Email Add On Init" />
          <complexServiceProperty name="InfoEmailPassword" friendlyName="Info Email Password" defaultValue="" storeType="noStore" log="false" />
          <complexServiceProperty name="InitDns" />
        </complexServicePropertyList>
        <partList>
          <partService name="MailDomain" min="1" max="1">
            <partList>
              <partService name="MailAccount" min="0">
                <partList>
                  <partService name="MailAlias" min="0">
                  </partService>
                </partList>
              </partService>
              <partService name="Forwarder">
                <partList>
                  <partService name="TargetEmail">
                  </partService>
                </partList>
              </partService>
            </partList>
          </partService>
          <partService name="DnsZone" min="1" max="1">
          </partService>
        </partList>
        <init>
          <add partName="MailDomain" instanceName="MailDomainInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Domain">
                    <expression>$CsMailSupport::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="MailAccount" condition="$CsMailSupport::InitInfoEmail neq null">
              <initPropertyList>
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Email">
                      <expression>info@+$CsMailSupport::Domain</expression>
                    </serviceProperty>
                    <serviceProperty name="Password">
                      <expression>$CsMailSupport::InfoEmailPassword</expression>
                    </serviceProperty>
                    <serviceProperty name="Maildir">
                      <expression>i\/+$CsMailSupport::Domain+\/info</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
              <add partName="MailAlias">
                <initPropertyList>
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="Email">
                        <expression>abuse@+$CsMailSupport::Domain</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
              </add>
              <add partName="MailAlias">
                <initPropertyList>
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="Email">
                        <expression>postmaster@+$CsMailSupport::Domain</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
              </add>
            </add>
          </add>
          <add partName="DnsZone" condition="$CsMailSupport::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsMailSupport::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <!-- "mail" record, no subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailSupport::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <initProperty name="Label" value="mail" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>#Instance(MailDomainInstance).Resource.MailIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- "mail" record, with subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailSupport::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>#Instance(MailDomainInstance).Resource.MailIpAddress</expression>
                    </serviceProperty>
                    <serviceProperty name="Label">
                      <expression>mail\.+$CsMailSupport::DomainPrefix</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- "mail" MX record, no subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailSupport::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="Label" value="@" />
                <initProperty name="DnsType" value="MX" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>10 mail</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- "mail" MX record, with subdomain -->
            <add partName="DnsZoneRecord" condition="$CsMailSupport::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="MX" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMailSupport::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>10 mail\.+$CsMailSupport::DomainPrefix</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsFtpAccount" friendlyName="Complex service wrappper for FTPAccount">
        <complexServicePropertyList>
          <complexServiceProperty name="Username" friendlyName="Ftp Username" key="true" />
          <complexServiceProperty name="Password" friendlyName="Ftp account password" storeType="noStore" log="false" />
          <complexServiceProperty name="PosixUid" friendlyName="Posix UID number" />
          <complexServiceProperty name="PosixGid" friendlyName="Posix GID number" />
          <complexServiceProperty name="RootFolderParentPath" friendlyName="Root folder parent path" />
          <complexServiceProperty name="Dir" friendlyName="Virtual Pure FTPd User Home Directory" />
        </complexServicePropertyList>
        <partList>
          <partService name="FTPAccount" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="User">
                  <expression>#Account()+\-+$CsFtpAccount::Username</expression>
                </serviceProperty>
                <serviceProperty name="Password">
                  <expression>$CsFtpAccount::Password</expression>
                </serviceProperty>
                <serviceProperty name="UID">
                  <expression>$CsFtpAccount::PosixUid</expression>
                </serviceProperty>
                <serviceProperty name="GID">
                  <expression>$CsFtpAccount::PosixGid</expression>
                </serviceProperty>
                <serviceProperty name="Dir">
                  <expression>\/storage\/content\/+$CsFtpAccount::RootFolderParentPath+\/+#Account()+\/+$CsFtpAccount::Dir</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="FTPAccount" instanceName="FtpAccountInstance">
          </add>
        </init>
      </complexService>
      <complexService name="CsFtpSiteSupport" friendlyName="FTP support for site">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Website hostname" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Domain prefix(subdomain part)" />
          <complexServiceProperty name="FtpResourceIp" friendlyName="FTP resource IP address" />
        </complexServicePropertyList>
        <partList>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsFtpSiteSupport::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <!-- "ftp" record, without prefix -->
            <add partName="DnsZoneRecord" condition="$CsFtpSiteSupport::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <initProperty name="Label" value="ftp" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>$CsFtpSiteSupport::FtpResourceIp</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <!-- "ftp" record, with prefix -->
            <add partName="DnsZoneRecord" condition="$CsFtpSiteSupport::DomainPrefix neq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>$CsFtpSiteSupport::FtpResourceIp</expression>
                    </serviceProperty>
                    <serviceProperty name="Label">
                      <expression>ftp\.+$CsFtpSiteSupport::DomainPrefix</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>ftp\.+$CsFtpSiteSupport::Hostname</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>$CsFtpSiteSupport::FtpResourceIp</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsLinuxBinding" friendlyName="Linux(Apache) website binding">
        <complexServicePropertyList>
          <complexServiceProperty name="Sitename" friendlyName="Site to bind to" />
          <complexServiceProperty name="Hostname" friendlyName="Binding Hostname" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone to add binding to" />
          <complexServiceProperty name="DomainPrefix" friendlyName="DNS Zone Record Label for binding" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" defaultValue="false" />
          <complexServiceProperty name="InitDns" defaultValue="true" />
        </complexServicePropertyList>
        <partList>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="ApacheWebSite" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="ServerName">
                  <expression>$CsLinuxBinding::Sitename</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="ApacheWebAlias" canAddSame="false">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="ApacheWebSite" instanceName="ApacheInstance">
            <add partName="ApacheWebAlias">
              <initPropertyList>
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="AliasHostname">
                      <expression>$CsLinuxBinding::Hostname</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <add partName="DnsZone" condition="$CsLinuxBinding::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsLinuxBinding::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>$CsLinuxBinding::DnsZoneShared</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsLinuxBinding::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(ApacheInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsLinuxAlias" friendlyName="Linux(Apache) website alias">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Alias" key="true" />
          <complexServiceProperty name="Sitename" friendlyName="Sitename alias is for" />
          <complexServiceProperty name="DnsZone" friendlyName="Alias DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Alias DNS Zone Record Label" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" />
          <complexServiceProperty name="InfoEmailPassword" friendlyName="Password for inital mail account" storeType="noStore" log="false" />
          <complexServiceProperty name="InitDns" defaultValue="true" />
          <complexServiceProperty name="InitEmail" defaultValue="true" />
        </complexServicePropertyList>
        <partList>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="CsLinuxBinding" canAddSame="false">
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsLinuxAlias::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxAlias::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxAlias::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsLinuxAlias::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsLinuxAlias::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="InfoEmailPassword">
                  <expression>$CsLinuxAlias::InfoEmailPassword</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsLinuxAlias::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxAlias::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxAlias::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="InitInfoEmail">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone" condition="$CsLinuxAlias::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsLinuxAlias::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, no subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxAlias::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsLinuxAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>@</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsLinuxAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www DNS Record, no subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxAlias::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsLinuxAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsLinuxAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsLinuxAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, with subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxAlias::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsLinuxAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsLinuxAlias::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsLinuxAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www DNS Record, with subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxAlias::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsLinuxAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsLinuxAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsLinuxAlias::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsLinuxAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsLinuxBinding">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxAlias::Hostname+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsLinuxAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsLinuxAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsLinuxAlias::InitEmail neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsLinuxWebsite" friendlyName="Linux website(Apache) complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Hostname" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Domain prefix (subdomain part)" />
          <complexServiceProperty name="FtpResourceIp" friendlyName="FTP resource IP address" />
          <complexServiceProperty name="InfoEmailPassword" friendlyName="FTP resource IP address" storeType="noStore" log="false" />
          <complexServiceProperty name="RootFolderParentPath" friendlyName="Root folder parent path" />
          <complexServiceProperty name="InitDns" defaultValue="true" />
          <complexServiceProperty name="InitEmail" defaultValue="true" />
        </complexServicePropertyList>
        <partList>
          <partService name="RootFolder" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="FolderPath">
                  <expression>\/+$CsLinuxWebsite::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="Name">
                  <expression>#Account()</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="ApacheWebSite" min="1" max="1" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="ServerName">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="Username">
                  <expression>#Account()</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="ApacheErrorDocument" canAddSame="false">
              </partService>
              <partService name="ApacheProtectedFolder" canAddSame="false">
                <partList>
                  <partService name="ApacheProtectedFolderUser" canAddSame="false">
                  </partService>
                </partList>
              </partService>
            </partList>
          </partService>
          <partService name="CsLinuxBinding" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Sitename">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxWebsite::InitDns</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsLinuxAlias" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Sitename">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxWebsite::InitDns</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxWebsite::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsLinuxWebsite::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxWebsite::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="InitInfoEmail">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsAwstats" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsLinuxWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="RootFolderParentPath">
                  <expression>$CsLinuxWebsite::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsLinuxWebsite::InitDns</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="CsFtpSiteSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Hostname">
                  <expression>$CsLinuxWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="FtpResourceIp">
                  <expression>$CsLinuxWebsite::FtpResourceIp</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsLinuxWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsLinuxWebsite::DnsZone</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="RootFolder">
            <add partName="Folder">
              <initPropertyList>
                <initProperty name="Permissions" value="710" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="FolderPath">
                      <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Name">
                      <expression>$CsLinuxWebsite::Hostname</expression>
                    </serviceProperty>
                    <serviceProperty name="Owner">
                      <expression>#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Group">
                      <expression>33</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="2710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>public_html</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
                <add partName="File">
                  <initPropertyList>
                    <initProperty name="Permissions" value="640" />
                    <propertyTransformation>
                      <simpleTransformer>
                        <serviceProperty name="FolderPath">
                          <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname+\/public_html</expression>
                        </serviceProperty>
                        <serviceProperty name="Name">
                          <expression>index\.html</expression>
                        </serviceProperty>
                        <serviceProperty name="Owner">
                          <expression>#Account()</expression>
                        </serviceProperty>
                        <serviceProperty name="Group">
                          <expression>33</expression>
                        </serviceProperty>
                      </simpleTransformer>
                    </propertyTransformation>
                  </initPropertyList>
                  <initOperationsList>
                    <initOperation name="CopyContentFromFile" opArgument="\/+#Account().ResellerRootPath+\/index\.html\.default;false" />
                  </initOperationsList>
                </add>
                <add partName="Folder">
                  <initPropertyList>
                    <initProperty name="Permissions" value="2711" />
                    <propertyTransformation>
                      <simpleTransformer>
                        <serviceProperty name="FolderPath">
                          <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname+\/public_html</expression>
                        </serviceProperty>
                        <serviceProperty name="Name">
                          <expression>cgi-bin</expression>
                        </serviceProperty>
                        <serviceProperty name="Owner">
                          <expression>#Account()</expression>
                        </serviceProperty>
                        <serviceProperty name="Group">
                          <expression>#Account()</expression>
                        </serviceProperty>
                      </simpleTransformer>
                    </propertyTransformation>
                  </initPropertyList>
                </add>
              </add>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>data</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
              </add>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>logs</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
                <add partName="File">
                  <initPropertyList>
                    <initProperty name="Permissions" value="640" />
                    <propertyTransformation>
                      <simpleTransformer>
                        <serviceProperty name="FolderPath">
                          <expression>\/+$CsLinuxWebsite::RootFolderParentPath+\/+#Account()+\/+$CsLinuxWebsite::Hostname+\/logs</expression>
                        </serviceProperty>
                        <serviceProperty name="Name">
                          <expression>access\.log</expression>
                        </serviceProperty>
                        <serviceProperty name="Owner">
                          <expression>#Account()</expression>
                        </serviceProperty>
                        <serviceProperty name="Group">
                          <expression>33</expression>
                        </serviceProperty>
                      </simpleTransformer>
                    </propertyTransformation>
                  </initPropertyList>
                </add>
              </add>
            </add>
          </add>
          <add partName="DnsZone" condition="$CsLinuxWebsite::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsLinuxWebsite::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="ApacheWebSite">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="ServerName">
                    <expression>$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, equal to hostname, no subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxWebsite::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>@</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, equal to hostname, with subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxWebsite::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsLinuxWebsite::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www. Dns Record, no subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxWebsite::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www. Dns Record, with subdomain -->
          <add partName="CsLinuxBinding" condition="$CsLinuxWebsite::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsLinuxWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsLinuxWebsite::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsLinuxBinding">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsLinuxWebsite::Hostname+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxWebsite::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsLinuxWebsite::InitEmail neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Domain">
                    <expression>$CsLinuxWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsLinuxWebsite::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="InfoEmailPassword">
                    <expression>$CsLinuxWebsite::InfoEmailPassword</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsLinuxWebsite::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsFtpSiteSupport" condition="$CsLinuxWebsite::InitDns neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsWindowsBinding" friendlyName="IIS website binding">
        <complexServicePropertyList>
          <complexServiceProperty name="Sitename" friendlyName="Site to bind to" />
          <complexServiceProperty name="Hostname" friendlyName="Binding Hostname" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone to add binding to" />
          <complexServiceProperty name="DomainPrefix" friendlyName="DNS Zone Record Label for binding" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" defaultValue="false" />
          <complexServiceProperty name="InitDns" />
        </complexServicePropertyList>
        <partList>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="IISWebSite" min="1" max="1" equivalenceCriteriaParams="Name">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Name">
                  <expression>$CsWindowsBinding::Sitename</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="IISWebAlias" canAddSame="false">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="IISWebSite" instanceName="IisWebsiteInstance">
            <add partName="IISWebAlias">
              <initPropertyList>
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="HostHeader">
                      <expression>$CsWindowsBinding::Hostname</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <add partName="DnsZone" condition="$CsWindowsBinding::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsWindowsBinding::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>$CsWindowsBinding::DnsZoneShared</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsWindowsBinding::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(IisWebsiteInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsWindowsAlias" friendlyName="IIS website alias">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Alias" key="true" />
          <complexServiceProperty name="Sitename" friendlyName="Sitename alias is for" />
          <complexServiceProperty name="DnsZone" friendlyName="Alias DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Alias DNS Zone Record Label" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" />
          <complexServiceProperty name="InfoEmailPassword" friendlyName="Password for inital mail account" storeType="noStore" log="false" />
          <complexServiceProperty name="InitDns" />
          <complexServiceProperty name="InitEmail" />
        </complexServicePropertyList>
        <partList>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="CsWindowsBinding" canAddSame="false">
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsWindowsAlias::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsAlias::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsAlias::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsAlias::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsWindowsAlias::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsAlias::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsAlias::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsAlias::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="InitInfoEmail">
                  <expression>true</expression>
                </serviceProperty>
                <serviceProperty name="InitInfoEmail">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone" condition="$CsWindowsAlias::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsWindowsAlias::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, no subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsAlias::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsWindowsAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>@</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsWindowsAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www DNS Record, no subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsAlias::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsWindowsAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsWindowsAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsWindowsAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- basic DNS Record, with subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsAlias::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsWindowsAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsWindowsAlias::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsWindowsAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- www DNS Record, with subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsAlias::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsWindowsAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsWindowsAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsAlias::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsWindowsAlias::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>$CsWindowsAlias::DnsZoneShared</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsWindowsBinding">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsAlias::Hostname+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="Sitename">
                    <expression>$CsWindowsAlias::Sitename</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsWindowsAlias::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsAlias::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsWindowsAlias::InitEmail neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="InfoEmailPassword">
                    <expression>$CsWindowsAlias::InfoEmailPassword</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsWindowsWebsite" friendlyName="IIS website complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Website hostname" key="true" />
          <complexServiceProperty name="DomainPrefix" friendlyName="DomainPrefix" />
          <complexServiceProperty name="ADPassword" friendlyName="Active directory user password" storeType="encrypt" log="false" />
          <complexServiceProperty name="DnsZone" friendlyName="DNS Zone" />
          <complexServiceProperty name="FtpResourceIp" friendlyName="FTP resource IP address" />
          <complexServiceProperty name="InfoEmailPassword" friendlyName="FTP resource IP address" storeType="noStore" log="false" />
          <complexServiceProperty name="RootFolderParentPath" friendlyName="Root folder parent path" />
          <complexServiceProperty name="InitDns" defaultValue="true" />
          <complexServiceProperty name="InitEmail" defaultValue="true" />
          <complexServiceProperty name="InitNetVersion" friendlyName=".NET version of application pool" defaultValue="v4.0" />
        </complexServicePropertyList>
        <partList>
          <partService name="RootFolder" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="FolderPath">
                  <expression>\/+$CsWindowsWebsite::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="Name">
                  <expression>#Account()</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="IISApplicationPool" min="1" equivalenceCriteriaParams="Name">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Username">
                  <expression>#Account()</expression>
                </serviceProperty>
                <serviceProperty name="Password">
                  <expression>$CsWindowsWebsite::ADPassword</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="IISWebSite" min="1" max="1" canAddSame="false">
          </partService>
          <partService name="CsWindowsBinding" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Sitename">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsWebsite::InitDns</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsWindowsAlias" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Sitename">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsWebsite::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="InitEmail">
                  <expression>$CsWindowsWebsite::InitEmail</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsWebsite::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsWebsite::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsWebsite::InitDns</expression>
                </serviceProperty>
                <serviceProperty name="InitInfoEmail">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsAwstats" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="RootFolderParentPath">
                  <expression>$CsWindowsWebsite::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>$CsWindowsWebsite::InitDns</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="CsFtpSiteSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Hostname">
                  <expression>$CsWindowsWebsite::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="FtpResourceIp">
                  <expression>$CsWindowsWebsite::FtpResourceIp</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsWindowsWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsWindowsWebsite::DnsZone</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="RootFolder">
            <add partName="Folder">
              <initPropertyList>
                <initProperty name="Permissions" value="710" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="FolderPath">
                      <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Name">
                      <expression>$CsWindowsWebsite::Hostname</expression>
                    </serviceProperty>
                    <serviceProperty name="Owner">
                      <expression>#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Group">
                      <expression>33</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="2710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()+\/+$CsWindowsWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>public_html</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
                <add partName="File">
                  <initPropertyList>
                    <initProperty name="Permissions" value="640" />
                    <propertyTransformation>
                      <simpleTransformer>
                        <serviceProperty name="FolderPath">
                          <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()+\/+$CsWindowsWebsite::Hostname+\/public_html</expression>
                        </serviceProperty>
                        <serviceProperty name="Name">
                          <expression>index\.html</expression>
                        </serviceProperty>
                        <serviceProperty name="Owner">
                          <expression>#Account()</expression>
                        </serviceProperty>
                        <serviceProperty name="Group">
                          <expression>33</expression>
                        </serviceProperty>
                      </simpleTransformer>
                    </propertyTransformation>
                  </initPropertyList>
                  <initOperationsList>
                    <initOperation name="CopyContentFromFile" opArgument="\/+#Account().ResellerRootPath+\/index\.html\.default;false" />
                  </initOperationsList>
                </add>
              </add>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()+\/+$CsWindowsWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>data</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
              </add>
              <add partName="Folder">
                <initPropertyList>
                  <initProperty name="Permissions" value="710" />
                  <propertyTransformation>
                    <simpleTransformer>
                      <serviceProperty name="FolderPath">
                        <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()+\/+$CsWindowsWebsite::Hostname</expression>
                      </serviceProperty>
                      <serviceProperty name="Name">
                        <expression>logs</expression>
                      </serviceProperty>
                      <serviceProperty name="Owner">
                        <expression>#Account()</expression>
                      </serviceProperty>
                      <serviceProperty name="Group">
                        <expression>33</expression>
                      </serviceProperty>
                    </simpleTransformer>
                  </propertyTransformation>
                </initPropertyList>
                <add partName="File">
                  <initPropertyList>
                    <initProperty name="Permissions" value="640" />
                    <propertyTransformation>
                      <simpleTransformer>
                        <serviceProperty name="FolderPath">
                          <expression>\/+$CsWindowsWebsite::RootFolderParentPath+\/+#Account()+\/+$CsWindowsWebsite::Hostname+\/logs</expression>
                        </serviceProperty>
                        <serviceProperty name="Name">
                          <expression>access\.log</expression>
                        </serviceProperty>
                        <serviceProperty name="Owner">
                          <expression>#Account()</expression>
                        </serviceProperty>
                        <serviceProperty name="Group">
                          <expression>33</expression>
                        </serviceProperty>
                      </simpleTransformer>
                    </propertyTransformation>
                  </initPropertyList>
                </add>
              </add>
            </add>
          </add>
          <add partName="IISApplicationPool">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Name">
                    <expression>#Account()+AppPool+$CsWindowsWebsite::InitNetVersion</expression>
                  </serviceProperty>
                  <serviceProperty name="NetVersion">
                    <expression>$CsWindowsWebsite::InitNetVersion</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="IISWebSite" instanceName="IisWebsiteInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Name">
                    <expression>$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="AppPoolName">
                    <expression>#Account()+AppPool+$CsWindowsWebsite::InitNetVersion</expression>
                  </serviceProperty>
                  <serviceProperty name="HomeDirectory">
                    <expression>\\\\webstorage\\storage_content\\+$CsWindowsWebsite::RootFolderParentPath+\\+#Account()+\\+$CsWindowsWebsite::Hostname+\\public_html</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="DnsZone" condition="$CsWindowsWebsite::InitDns neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsWindowsWebsite::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <!-- wildcard domain DNS Zone Record -->
            <add partName="DnsZoneRecord" condition="$CsWindowsWebsite::DomainPrefix eq null">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <initProperty name="Label" value="*" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Data">
                      <expression>#Instance(IisWebsiteInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          <!-- base record, equal to hostanme, no subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsWebsite::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>@</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- base record, equal to hostanme, with subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsWebsite::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsWindowsWebsite::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- "www" record, without subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsWebsite::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- "www" record, with subdomain -->
          <add partName="CsWindowsBinding" condition="$CsWindowsWebsite::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>www\.+$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>$CsWindowsWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsWindowsWebsite::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsWindowsBinding">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Hostname">
                    <expression>$CsWindowsWebsite::Hostname+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsWindowsWebsite::InitEmail neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Domain">
                    <expression>$CsWindowsWebsite::Hostname</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsWindowsWebsite::DomainPrefix</expression>
                  </serviceProperty>
                  <serviceProperty name="InfoEmailPassword">
                    <expression>$CsWindowsWebsite::InfoEmailPassword</expression>
                  </serviceProperty>
                  <serviceProperty name="InitDns">
                    <expression>$CsWindowsWebsite::InitDns</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsFtpSiteSupport" condition="$CsWindowsWebsite::InitDns neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsMySqlDatabase" friendlyName="MySQL Databasee Complex Service">
        <complexServicePropertyList>
          <complexServiceProperty name="DatabaseName" friendlyName="Database Name" key="true" />
          <complexServiceProperty name="CharacterSet" friendlyName="Character Set" />
          <complexServiceProperty name="Collation" friendlyName="Collation" />
        </complexServicePropertyList>
        <partList>
          <partService name="MySQLDatabase" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="DatabaseName">
                  <expression>#Account()+\-+$CsMySqlDatabase::DatabaseName</expression>
                </serviceProperty>
                <serviceProperty name="CharacterSet">
                  <expression>$CsMySqlDatabase::CharacterSet</expression>
                </serviceProperty>
                <serviceProperty name="Collation">
                  <expression>$CsMySqlDatabase::Collation</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
          </partService>
        </partList>
        <init>
          <add partName="MySQLDatabase" instanceName="MysqlDatabaseInstance">
          </add>
          <!--
          <add partName="DnsZone">
            <initPropertyList>
              <initProperty name="Zonename" value="mysql.citynetwork.se" />
              <initProperty name="Shared" value="true" />
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMySqlDatabase::DatabaseName+\-+#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MysqlDatabaseInstance).Resource.PublicIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMySqlDatabase::DatabaseName+\-+#Account()+\.phpmyadmin</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MysqlDatabaseInstance).Resource.PublicIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          -->
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsMysqlDatabasePrivileges" friendlyName="MySql Database privileges complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="Hostname" friendlyName="Ip address of machine to allow access" key="true" />
          <complexServiceProperty name="Username" friendlyName="MySql account username" key="true" />
          <complexServiceProperty name="DatabaseName" friendlyName="Database name" key="true" />
          <complexServiceProperty name="Privileges" friendlyName="Database privileges" />
        </complexServicePropertyList>
        <partList>
          <partService name="MySQLAccount" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Username">
                  <expression>#Account()+\-+$CsMysqlDatabasePrivileges::Username</expression>
                </serviceProperty>
                <serviceProperty name="Hostname">
                  <expression>$CsMysqlDatabasePrivileges::Hostname</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="DatabasePrivileges" min="1" max="1">
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="DatabaseName">
                      <expression>#Account()+\-+$CsMysqlDatabasePrivileges::DatabaseName</expression>
                    </serviceProperty>
                    <serviceProperty name="Privileges">
                      <expression>$CsMysqlDatabasePrivileges::Privileges</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="MySQLAccount">
            <add partName="DatabasePrivileges">
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsMySqlAccount" friendlyName="MySql Account Complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="MySqlUsername" friendlyName="Username" key="true" />
          <complexServiceProperty name="MySqlPassword" friendlyName="Password" storeType="noStore" log="false" />
          <complexServiceProperty name="Hostname" friendlyName="Ip address of machine to allow access" key="true" />
        </complexServicePropertyList>
        <partList>
          <partService name="MySQLAccount" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Username">
                  <expression>#Account()+\-+$CsMySqlAccount::MySqlUsername</expression>
                </serviceProperty>
                <serviceProperty name="Hostname">
                  <expression>$CsMySqlAccount::Hostname</expression>
                </serviceProperty>
                <serviceProperty name="Password">
                  <expression>$CsMySqlAccount::MySqlPassword</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="DatabasePrivileges" max="0">
              </partService>
              <partService name="GlobalPrivileges" max="0">
              </partService>
            </partList>
          </partService>
          <partService name="CsMysqlDatabasePrivileges" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Username">
                  <expression>$CsMySqlAccount::MySqlUsername</expression>
                </serviceProperty>
                <serviceProperty name="Hostname">
                  <expression>$CsMySqlAccount::Hostname</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="MySQLAccount">
          </add>
        </init>
      </complexService>
      <complexService name="CsMSSQLDatabase" friendlyName="MSSQL Databasee Complex Service">
        <complexServicePropertyList>
          <complexServiceProperty name="DatabaseName" friendlyName="Database Name" key="true" />
          <complexServiceProperty name="Collation" friendlyName="Collation" />
        </complexServicePropertyList>
        <partList>
          <partService name="MSSQLDatabase" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="DatabaseName">
                  <expression>#Account()+\-+$CsMSSQLDatabase::DatabaseName</expression>
                </serviceProperty>
                <serviceProperty name="Collation">
                  <expression>$CsMSSQLDatabase::Collation</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
          </partService>
        </partList>
        <init>
          <add partName="MSSQLDatabase" instanceName="MSSQLInstance">
          </add>
          <!--
          <add partName="DnsZone">
            <initPropertyList>
              <initProperty name="Zonename" value="mssql.citynetwork.se" />
              <initProperty name="Shared" value="true" />
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMSSQLDatabase::DatabaseName+\-+#Account()</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MSSQLInstance).Resource.PublicIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsMSSQLDatabase::DatabaseName+\-+#Account()+\.mylittleadmin</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(MSSQLInstance).Resource.AdminIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
          -->
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsMSSQLDatabasePrivileges">
        <complexServicePropertyList>
          <complexServiceProperty name="LoginName" friendlyName="MSSQL account login" key="true" />
          <complexServiceProperty name="DatabaseName" friendlyName="Database Name" key="true" />
          <complexServiceProperty name="Privileges" friendlyName="Privileges" defaultValue="" />
          <complexServiceProperty name="DatabaseRoles" friendlyName="Database Roles" defaultValue="" />
        </complexServicePropertyList>
        <partList>
          <partService name="MSSQLLogin" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="LoginName">
                  <expression>#Account()+\-+$CsMSSQLDatabasePrivileges::LoginName</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="MSSQLDatabasePrivileges" min="1" max="1">
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="DatabaseName">
                      <expression>#Account()+\-+$CsMSSQLDatabasePrivileges::DatabaseName</expression>
                    </serviceProperty>
                    <serviceProperty name="Privileges">
                      <expression>$CsMSSQLDatabasePrivileges::Privileges</expression>
                    </serviceProperty>
                    <serviceProperty name="DatabaseRoles">
                      <expression>$CsMSSQLDatabasePrivileges::DatabaseRoles</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="MSSQLLogin">
            <add partName="MSSQLDatabasePrivileges">
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsMSSQLAccount" friendlyName="MSSQL Account Complex service">
        <complexServicePropertyList>
          <complexServiceProperty name="LoginName" friendlyName="Username" key="true" />
          <complexServiceProperty name="Password" friendlyName="Password" storeType="noStore" log="false" />
        </complexServicePropertyList>
        <partList>
          <partService name="MSSQLLogin" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="LoginName">
                  <expression>#Account()+\-+$CsMSSQLAccount::LoginName</expression>
                </serviceProperty>
                <serviceProperty name="Password">
                  <expression>$CsMSSQLAccount::Password</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
            <partList>
              <partService name="MSSQLDatabasePrivileges" min="0" max="0">
              </partService>
            </partList>
          </partService>
          <partService name="CsMSSQLDatabasePrivileges" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="LoginName">
                  <expression>$CsMSSQLAccount::LoginName</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="MSSQLLogin">
          </add>
        </init>
      </complexService>
      <complexService name="CsDatabase">
        <partList>
          <partService name="CsMySqlDatabase" canAddSame="false">
          </partService>
          <partService name="CsMySqlAccount" canAddSame="false">
          </partService>
          <partService name="CsMSSQLDatabase" canAddSame="false">
          </partService>
          <partService name="CsMSSQLAccount" canAddSame="false">
          </partService>
        </partList>
      </complexService>
      <complexService name="CsParkedHost" friendlyName="Host parking service">
        <complexServicePropertyList>
          <complexServiceProperty name="Host" friendlyName="Parking for specified hostaname" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" defaultValue="false" />
        </complexServicePropertyList>
        <partList>
          <partService name="ApacheParkedHost" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Host">
                  <expression>$CsParkedHost::Host</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="ApacheParkedHost" instanceName="ApacheParkingInstance">
          </add>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsParkedHost::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>$CsParkedHost::DnsZoneShared</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsParkedHost::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(ApacheParkingInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsDomainParking" friendlyName="Complex service for domain parking">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain to enable parking for" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="InitEmail" friendlyName="Initialize mail support" />
        </complexServicePropertyList>
        <partList>
          <partService name="CsParkedHost" canAddSame="false" min="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainParking::DnsZone</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainParking::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainParking::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainParking::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainParking::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainParking::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainParking::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsDomainParking::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsParkedHost" condition="$CsDomainParking::DomainPrefix eq null">
            <initPropertyList>
              <initProperty name="DomainPrefix" value="@" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainParking::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsParkedHost" condition="$CsDomainParking::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainParking::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsParkedHost" condition="$CsDomainParking::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainParking::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainParking::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsParkedHost" condition="$CsDomainParking::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainParking::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsDomainParking::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsParkedHost">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainParking::Domain+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainParking::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsDomainParking::InitEmail neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsHostRedirection" friendlyName="Host redirection service">
        <complexServicePropertyList>
          <complexServiceProperty name="Host" friendlyName="Redirection for specified hostaname" key="true" />
          <complexServiceProperty name="RedirectionURL" friendlyName="URL to redirect to" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" defaultValue="false" />
        </complexServicePropertyList>
        <partList>
          <partService name="ApacheRedirection" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Host">
                  <expression>$CsHostRedirection::Host</expression>
                </serviceProperty>
                <serviceProperty name="URL">
                  <expression>$CsHostRedirection::RedirectionURL</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
          </partService>
        </partList>
        <init>
          <add partName="ApacheRedirection" instanceName="ApacheRedirectionInstance">
          </add>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsHostRedirection::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>$CsHostRedirection::DnsZoneShared</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsHostRedirection::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(ApacheRedirectionInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsDomainRedirection" friendlyName="Complex service for domain redirection">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain to enable parking for" key="true" />
          <complexServiceProperty name="RedirectionURL" friendlyName="URL to redirect to" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="InitEmail" friendlyName="Initialize mail support" />
        </complexServicePropertyList>
        <partList>
          <partService name="CsHostRedirection" canAddSame="false" min="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainRedirection::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="RedirectionURL">
                  <expression>$CsDomainRedirection::RedirectionURL</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainRedirection::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainRedirection::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainRedirection::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainRedirection::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainRedirection::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainRedirection::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsDomainRedirection::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostRedirection" condition="$CsDomainRedirection::DomainPrefix eq null">
            <initPropertyList>
              <initProperty name="DomainPrefix" value="@" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainRedirection::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostRedirection" condition="$CsDomainRedirection::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostRedirection" condition="$CsDomainRedirection::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainRedirection::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostRedirection" condition="$CsDomainRedirection::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsDomainRedirection::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostRedirection">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainRedirection::Domain+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsDomainRedirection::InitEmail neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsHostFrameRedirection" friendlyName="Host frame redirection service">
        <complexServicePropertyList>
          <complexServiceProperty name="Host" friendlyName="Redirection for specified hostaname" key="true" />
          <complexServiceProperty name="Title" friendlyName="Title" defaultValue="" />
          <complexServiceProperty name="Keywords" friendlyName="Keywords" defaultValue="" />
          <complexServiceProperty name="Description" friendlyName="Description" defaultValue="" />
          <complexServiceProperty name="RedirectionURL" friendlyName="URL to redirect to" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="DnsZoneShared" friendlyName="DNS Zone Shared state" defaultValue="false" />
        </complexServicePropertyList>
        <partList>
          <partService name="ApacheFrameRedirection" min="1" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Host">
                  <expression>$CsHostFrameRedirection::Host</expression>
                </serviceProperty>
                <serviceProperty name="Title">
                  <expression>$CsHostFrameRedirection::Title</expression>
                </serviceProperty>
                <serviceProperty name="Keywords">
                  <expression>$CsHostFrameRedirection::Keywords</expression>
                </serviceProperty>
                <serviceProperty name="Description">
                  <expression>$CsHostFrameRedirection::Description</expression>
                </serviceProperty>
                <serviceProperty name="URL">
                  <expression>$CsHostFrameRedirection::RedirectionURL</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
          </partService>
        </partList>
        <init>
          <add partName="ApacheFrameRedirection" instanceName="ApacheFrameRedirectionInstance">
          </add>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsHostFrameRedirection::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="Shared">
                    <expression>$CsHostFrameRedirection::DnsZoneShared</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
            <add partName="DnsZoneRecord">
              <initPropertyList>
                <initProperty name="Id" value="" />
                <initProperty name="DnsType" value="A" />
                <propertyTransformation>
                  <simpleTransformer>
                    <serviceProperty name="Label">
                      <expression>$CsHostFrameRedirection::DomainPrefix</expression>
                    </serviceProperty>
                    <serviceProperty name="Data">
                      <expression>#Instance(ApacheFrameRedirectionInstance).Resource.ClusterIpAddress</expression>
                    </serviceProperty>
                  </simpleTransformer>
                </propertyTransformation>
              </initPropertyList>
            </add>
          </add>
        </init>
      </complexService>
      <complexService name="CsDomainFrameRedirection" friendlyName="Complex service for domain frame redirection">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain to enable parking for" key="true" />
          <complexServiceProperty name="Title" friendlyName="Title" defaultValue="" />
          <complexServiceProperty name="Keywords" friendlyName="Keywords" defaultValue="" />
          <complexServiceProperty name="Description" friendlyName="Description" defaultValue="" />
          <complexServiceProperty name="RedirectionURL" friendlyName="URL to redirect to" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="InitEmail" friendlyName="Initialize mail support" />
        </complexServicePropertyList>
        <partList>
          <partService name="CsHostFrameRedirection" canAddSame="false" min="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Title">
                  <expression>$CsDomainFrameRedirection::Title</expression>
                </serviceProperty>
                <serviceProperty name="Keywords">
                  <expression>$CsDomainFrameRedirection::Keywords</expression>
                </serviceProperty>
                <serviceProperty name="Description">
                  <expression>$CsDomainFrameRedirection::Description</expression>
                </serviceProperty>
                <serviceProperty name="RedirectionURL">
                  <expression>$CsDomainFrameRedirection::RedirectionURL</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainFrameRedirection::DnsZone</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainFrameRedirection::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainFrameRedirection::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainFrameRedirection::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainFrameRedirection::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainFrameRedirection::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainFrameRedirection::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
        </partList>
        <init>
          <add partName="DnsZone">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsDomainFrameRedirection::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostFrameRedirection" condition="$CsDomainFrameRedirection::DomainPrefix eq null">
            <initPropertyList>
              <initProperty name="DomainPrefix" value="@" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainFrameRedirection::Domain</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostFrameRedirection" condition="$CsDomainFrameRedirection::DomainPrefix eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainFrameRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostFrameRedirection" condition="$CsDomainFrameRedirection::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainFrameRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainFrameRedirection::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostFrameRedirection" condition="$CsDomainFrameRedirection::DomainPrefix neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>www\.+$CsDomainFrameRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>www\.+$CsDomainFrameRedirection::DomainPrefix</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsHostFrameRedirection">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Host">
                    <expression>$CsDomainFrameRedirection::Domain+\.preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DomainPrefix">
                    <expression>$CsDomainFrameRedirection::Domain</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZone">
                    <expression>preview\.citynetwork\.se</expression>
                  </serviceProperty>
                  <serviceProperty name="DnsZoneShared">
                    <expression>true</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsDomainFrameRedirection::InitEmail neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsDomainNoWebsite" friendlyName="Complex service domain with no website">
        <complexServicePropertyList>
          <complexServiceProperty name="Domain" friendlyName="Domain to enable parking for" key="true" />
          <complexServiceProperty name="DnsZone" friendlyName="Hostname DNS Zone" />
          <complexServiceProperty name="DnsZoneIsSlave" friendlyName="Is the DNS zone a slave zone" />
          <complexServiceProperty name="DnsSlaveZoneMasterIP" friendlyName="Master IP for slave zones, otherwise ignored." defaultValue="" />
          <complexServiceProperty name="DomainPrefix" friendlyName="Hostname domain prefix" />
          <complexServiceProperty name="InitEmail" friendlyName="Initialize mail support" />
        </complexServicePropertyList>
        <partList>
          <partService name="CsMailmanSupport">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainNoWebsite::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainNoWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainNoWebsite::DomainPrefix</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsMailSupport" max="1">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="Domain">
                  <expression>$CsDomainNoWebsite::Domain</expression>
                </serviceProperty>
                <serviceProperty name="DomainPrefix">
                  <expression>$CsDomainNoWebsite::DomainPrefix</expression>
                </serviceProperty>
                <serviceProperty name="DnsZone">
                  <expression>$CsDomainNoWebsite::DnsZone</expression>
                </serviceProperty>
                <serviceProperty name="InitDns">
                  <expression>true</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="DnsZone" max="1">
            <partList>
              <partService name="DnsZoneRecord">
              </partService>
            </partList>
          </partService>
          <partService name="DnsSlaveZone" max="1">
            <partList />
          </partService>
        </partList>
        <init>
          <add partName="DnsZone" condition="$CsDomainNoWebsite::DnsZoneIsSlave eq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsDomainNoWebsite::DnsZone</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="DnsSlaveZone" condition="$CsDomainNoWebsite::DnsZoneIsSlave neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Zonename">
                    <expression>$CsDomainNoWebsite::DnsZone</expression>
                  </serviceProperty>
                  <serviceProperty name="MasterIP">
                    <expression>$CsDomainNoWebsite::DnsSlaveZoneMasterIP</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsMailSupport" condition="$CsDomainNoWebsite::InitEmail neq null">
          </add>
        </init>
        <actionHooks>
          <onBeforeAddService type="Atomia.Provisioning.ActionHooks.BeforeAddService.UniquenessCheck, Atomia.Provisioning.ActionHooks.BeforeAddService"
                              argument="" />
          <onSwitchService type="Atomia.Provisioning.ActionHooks.SwitchService.DomainWebsiteSwitch, Atomia.Provisioning.ActionHooks.SwitchService"
                           argument="" />
        </actionHooks>
      </complexService>
      <complexService name="CsIPReservation" friendlyName="SSL IP reservation complex service">
        <partList>
          <partService name="IPResource" min="1" max="1">
          </partService>
          <partService name="LoadBalancerService" min="2" max="2">
          </partService>
        </partList>
        <init>
          <add partName="IPResource" instanceName="ReservedIPInstance" />
          <add partName="LoadBalancerService" instanceName="ReservedLoadbalancerInstanceHttps">
            <initPropertyList>
              <initProperty name="ExternalPort" value="443" />
              <initProperty name="ServiceType" value="HTTPS" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="ExternalIp">
                    <expression>#Instance(ReservedIPInstance)::IPAddress</expression>
                  </serviceProperty>
                  <serviceProperty name="NodesPort">
                    <expression>#Instance(ReservedIPInstance)::Port</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="LoadBalancerService" instanceName="ReservedLoadbalancerInstanceHttp">
            <initPropertyList>
              <initProperty name="ExternalPort" value="80" />
              <initProperty name="ServiceType" value="HTTP" />
              <initProperty name="NodesPort" value="80" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="ExternalIp">
                    <expression>#Instance(ReservedIPInstance)::IPAddress</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
        </init>
      </complexService>
      <complexService name="CsCertificate" friendlyName="SSL certificate complex service">
        <partList>
          <partService name="SSLCertificate" min="0" max="1">
          </partService>
          <partService name="CsIPReservation" min="0" max="1">
          </partService>
        </partList>
      </complexService>
      <complexService name="CsBase" friendlyName="Base complex service for hosting">
        <complexServicePropertyList>
          <complexServiceProperty name="ADPassword" friendlyName="Active Directory password" storeType="encrypt" log="false" />
          <complexServiceProperty name="ADDomain" friendlyName="Active Directory domain" defaultValue="@citynetwork.se" />
          <complexServiceProperty name="PosixUid" friendlyName="Unix UID number" />
          <complexServiceProperty name="RootFolderParentPath" friendlyName="Account root folder parent path" />
          <complexServiceProperty name="InitMasterFtpAccount" friendlyName="Add Initial FTP master" />
          <complexServiceProperty name="FtpPassword" friendlyName="Initial FTP master account password" storeType="noStore" log="false" />
        </complexServicePropertyList>
        <partList>
          <partService name="DomainUserAccount" min="1" max="1">
          </partService>
          <partService name="DomainGroupAccount" min="1" max="1">
          </partService>
          <partService name="RootFolder" min="1" max="1">
          </partService>
          <partService name="FTPAccount" min="1" max="1">
          </partService>
          <partService name="SSLCertificateOrderQuery" min="0" max="1" />
          <partService name="CsCertificate" />
          <partService name="CsWebPackages" />
          <partService name="CsFtpAccount" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="PosixUid">
                  <expression>$CsBase::PosixUid</expression>
                </serviceProperty>
                <serviceProperty name="PosixGid">
                  <expression>33</expression>
                </serviceProperty>
                <serviceProperty name="RootFolderParentPath">
                  <expression>$CsBase::RootFolderParentPath</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsWindowsWebsite" min="0" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="ADPassword">
                  <expression>$CsBase::ADPassword</expression>
                </serviceProperty>
                <serviceProperty name="RootFolderParentPath">
                  <expression>$CsBase::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="InitNetVersion">
                  <expression>v4\.0</expression>
                </serviceProperty>
                <serviceProperty name="FtpResourceIp">
                  <expression>#Instance(FtpResourceInstance).Resource.ClusterIpAddress</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
          <partService name="CsLinuxWebsite" min="0" canAddSame="false">
            <propertyTransformation>
              <simpleTransformer>
                <serviceProperty name="RootFolderParentPath">
                  <expression>$CsBase::RootFolderParentPath</expression>
                </serviceProperty>
                <serviceProperty name="FtpResourceIp">
                  <expression>#Instance(FtpResourceInstance).Resource.ClusterIpAddress</expression>
                </serviceProperty>
              </simpleTransformer>
            </propertyTransformation>
          </partService>
        </partList>
        <init>
          <add partName="DomainGroupAccount" instanceName="DomainGroupInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="GroupName">
                    <expression>#Account()+Group</expression>
                  </serviceProperty>
                  <serviceProperty name="Description">
                    <expression>Linux group for +#Account()</expression>
                  </serviceProperty>
                  <serviceProperty name="Domain">
                    <expression>$CsBase::ADDomain</expression>
                  </serviceProperty>
                  <serviceProperty name="PosixGid">
                    <expression>$CsBase::PosixUid</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="DomainUserAccount" instanceName="DomainUserInstance">
            <initPropertyList>
              <initProperty name="PosixLoginShell" value="/sbin/nologin" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="LogonName">
                    <expression>#Account()</expression>
                  </serviceProperty>
                  <serviceProperty name="Password">
                    <expression>$CsBase::ADPassword</expression>
                  </serviceProperty>
                  <serviceProperty name="Domain">
                    <expression>$CsBase::ADDomain</expression>
                  </serviceProperty>
                  <serviceProperty name="FullName">
                    <expression>$this::LogonName+$CsBase::ADDomain</expression>
                  </serviceProperty>
                  <serviceProperty name="PosixUid">
                    <expression>$CsBase::PosixUid</expression>
                  </serviceProperty>
                  <serviceProperty name="PosixGid">
                    <expression>$CsBase::PosixUid</expression>
                  </serviceProperty>
                  <serviceProperty name="PosixHomeDirectory">
                    <expression>\/storage\/content\/+$CsBase::RootFolderParentPath+\/+#Account()</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="RootFolder">
            <initPropertyList>
              <initProperty name="Permissions" value="710" />
              <initProperty name="Group" value="33" />
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="FolderPath">
                    <expression>\/+$CsBase::RootFolderParentPath</expression>
                  </serviceProperty>
                  <serviceProperty name="Name">
                    <expression>#Account()</expression>
                  </serviceProperty>
                  <serviceProperty name="Owner">
                    <expression>#Account()</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="FTPAccount" canDelete="false" instanceName="FtpResourceInstance">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="User">
                    <expression>#Account()+\-+master</expression>
                  </serviceProperty>
                  <serviceProperty name="Password">
                    <expression>$CsBase::FtpPassword</expression>
                  </serviceProperty>
                  <serviceProperty name="UID">
                    <expression>#Instance(DomainUserInstance)::PosixUid</expression>
                  </serviceProperty>
                  <serviceProperty name="GID">
                    <expression>33</expression>
                  </serviceProperty>
                  <serviceProperty name="Dir">
                    <expression>\/storage\/content\/+$CsBase::RootFolderParentPath+\/+#Account()</expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <!-- Hosting default FTP account -->
          <add partName="CsFtpAccount" condition="$CsBase::InitMasterFtpAccount neq null">
            <initPropertyList>
              <propertyTransformation>
                <simpleTransformer>
                  <serviceProperty name="Username">
                    <expression>master</expression>
                  </serviceProperty>
                  <serviceProperty name="Password">
                    <expression>$CsBase::FtpPassword</expression>
                  </serviceProperty>
                  <serviceProperty name="Dir">
                    <expression>
                    </expression>
                  </serviceProperty>
                </simpleTransformer>
              </propertyTransformation>
            </initPropertyList>
          </add>
          <add partName="CsWebPackages" />
        </init>
      </complexService>
    </complexServiceList>
  </servicesDescription>
  <packageDescription>
    <packageList>
      <package name="DomainRegistrationContactPackage">
        <serviceList>
          <service name="CsDomainRegList" />
          <service name="DomainRegContact" />
        </serviceList>
        <init>
          <serviceToAdd serviceName="CsDomainRegList">
          </serviceToAdd>
        </init>
      </package>
      <package name="BasePackage">
        <serviceList>
          <service name="Folders" />
        </serviceList>
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="100">
              <service name="Folders" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <init>
        </init>
      </package>
      <package name="DnsPackage">
        <serviceList>
          <service name="CsDomainParking" />
          <service name="CsDomainRedirection" />
          <service name="CsDomainFrameRedirection" />
          <service name="CsDomainNoWebsite" />
        </serviceList>
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="10">
              <service name="MailAccount" />
            </group>
            <group maxCount="0">
              <service name="DnsSlaveZone" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <actionHooks>
          <onBeforeChangePackage argument="BasePackage;DnsPackage;preview.citynetwork.se" type="Atomia.Provisioning.ActionHooks.PackageChange.UpgradeDowngrade, Atomia.Provisioning.ActionHooks.PackageChange" />
        </actionHooks>
      </package>
    </packageList>
    <packageExtensionList>
      <packageExtension name="StatisticAddon">
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="1" name="CsAwstats">
              <service name="CsAwstats" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <extendsList>
          <extends name="BasePackage" />
        </extendsList>
      </packageExtension>
      <packageExtension name="MySqlAddon">
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="1" name="CsMySqlDatabase">
              <service name="CsMySqlDatabase" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <extendsList>
          <extends name="BasePackage" />
        </extendsList>
      </packageExtension>
      <packageExtension name="MSSQLAddon">
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="1" name="CsMSSQLDatabase">
              <service name="CsMSSQLDatabase" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <extendsList>
          <extends name="BasePackage" />
        </extendsList>
      </packageExtension>
      <packageExtension name="MailmanAddon">
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="1" name="CsMailmanSupport">
              <service name="CsMailmanSupport" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <extendsList>
          <extends name="BasePackage" />
        </extendsList>
      </packageExtension>
      <packageExtension name="FtpAddon">
        <serviceLimitationList>
          <globalLimitation>
            <group maxCount="100" name="CsFtpAccount">
              <service name="CsFtpAccount" />
            </group>
          </globalLimitation>
        </serviceLimitationList>
        <extendsList>
          <extends name="BasePackage" />
        </extendsList>
      </packageExtension>
    </packageExtensionList>
  </packageDescription>
</provisioningDescription>